<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Walgelijk</name>
    </assembly>
    <members>
        <member name="T:Walgelijk.AudioRenderer">
            <summary>
            The global audio renderer 
            </summary>
        </member>
        <member name="P:Walgelijk.AudioRenderer.Volume">
            <summary>
            Master volume. Ranges from 0.0 to 1.0
            </summary>
        </member>
        <member name="P:Walgelijk.AudioRenderer.Muted">
            <summary>
            Mute all audio
            </summary>
        </member>
        <member name="P:Walgelijk.AudioRenderer.ListenerPosition">
            <summary>
            Position of the listener in world space
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Play(Walgelijk.Sound@)">
            <summary>
            Simply play a sound (or resumes, if paused)
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.PlayOnce(Walgelijk.Sound)">
            <summary>
            Play a sound once and let it overlap itself
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Play(Walgelijk.Sound@,System.Numerics.Vector2)">
            <summary>
            Play sound at a position in the world (or resumes, if paused)
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.PlayOnce(Walgelijk.Sound,System.Numerics.Vector2)">
            <summary>
            Play sound at a position in the world and let it overlap itself
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Stop(Walgelijk.Sound@)">
            <summary>
            Stop a specific sound
            </summary>
            <param name="sound"></param>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Pause(Walgelijk.Sound@)">
            <summary>
            Pause a specific sound
            </summary>
            <param name="sound"></param>
        </member>
        <member name="M:Walgelijk.AudioRenderer.StopAll">
            <summary>
            Stop all sounds
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.LoadSound(System.String)">
            <summary>
            Load a sound from file
            </summary>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.EmptyAudioRenderer">
            <summary>
            Placeholder audio renderer that is used when none is set
            </summary>
        </member>
        <member name="T:Walgelijk.Sound">
            <summary>
            Object that contains sound data
            </summary>
        </member>
        <member name="P:Walgelijk.Sound.Channels">
            <summary>
            Number of channels
            </summary>
        </member>
        <member name="P:Walgelijk.Sound.Data">
            <summary>
            Audio data
            </summary>
        </member>
        <member name="P:Walgelijk.Sound.SampleRate">
            <summary>
            Sample rate
            </summary>
        </member>
        <member name="P:Walgelijk.Sound.Duration">
            <summary>
            Duration of the sound
            </summary>
        </member>
        <member name="P:Walgelijk.Sound.Looping">
            <summary>
            Determines if the sound is looping
            </summary>
        </member>
        <member name="M:Walgelijk.Sound.#ctor(System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Int32)">
            <summary>
            Create a sound from raw data
            </summary>
        </member>
        <member name="T:Walgelijk.CameraComponent">
            <summary>
            Component that holds camera data
            </summary>
        </member>
        <member name="P:Walgelijk.CameraComponent.OrthographicSize">
            <summary>
            The orthographic size of this camera
            </summary>
        </member>
        <member name="P:Walgelijk.CameraComponent.PixelsPerUnit">
            <summary>
            Amount of pixels per translation unit
            </summary>
        </member>
        <member name="T:Walgelijk.CameraSystem">
            <summary>
            System that manages the built in <see cref="T:Walgelijk.CameraComponent"/>
            </summary>
        </member>
        <member name="P:Walgelijk.CameraSystem.MainCameraEntity">
            <summary>
            Main camera entity
            </summary>
        </member>
        <member name="P:Walgelijk.CameraSystem.MainCameraComponent">
            <summary>
            Main camera component
            </summary>
        </member>
        <member name="P:Walgelijk.CameraSystem.MainCameraTransform">
            <summary>
            Main camera transform component
            </summary>
        </member>
        <member name="M:Walgelijk.CameraSystem.SetMainCamera(Walgelijk.Entity)">
            <summary>
            Set the main camera for this system
            </summary>
            <param name="cameraEntity"></param>
        </member>
        <member name="T:Walgelijk.IShapeComponent">
            <summary>
            Interface that provides a <see cref="P:Walgelijk.IShapeComponent.VertexBuffer"/> and <see cref="T:Walgelijk.ShapeRenderTask"/>
            </summary>
        </member>
        <member name="P:Walgelijk.IShapeComponent.VertexBuffer">
            <summary>
            VertexBuffer that is generated. It's best not to edit this unless you really need to.
            </summary>
        </member>
        <member name="P:Walgelijk.IShapeComponent.RenderTask">
            <summary>
            The render task that is generated. It's best not to edit this unless you really need to.
            </summary>
        </member>
        <member name="P:Walgelijk.IShapeComponent.ScreenSpace">
            <summary>
            Determines if the shape should be rendered in screenspace
            </summary>
        </member>
        <member name="T:Walgelijk.RectangleShapeComponent">
            <summary>
            Basic rectangle renderer data
            </summary>
        </member>
        <member name="P:Walgelijk.RectangleShapeComponent.Color">
            <summary>
            Colour of the rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.RectangleShapeComponent.Size">
            <summary>
            Size of the rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.RectangleShapeComponent.Material">
            <summary>
            Material that is drawn with
            </summary>
        </member>
        <member name="M:Walgelijk.RectangleShapeComponent.#ctor">
            <summary>
            Create a rectangle renderer component
            </summary>
        </member>
        <member name="T:Walgelijk.ShapeRendererSystem">
            <summary>
            System that renders components that implement <see cref="T:Walgelijk.IShapeComponent"/>
            </summary>
        </member>
        <member name="T:Walgelijk.TransformComponent">
            <summary>
            Basic component that holds transformation data
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.Position">
            <summary>
            Position of the transform in world space
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.Rotation">
            <summary>
            Rotation in degrees of the transform in world space
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.Scale">
            <summary>
            Scale multiplier of the transform
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.LocalToWorldMatrix">
            <summary>
            The generated model matrix
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.WorldToLocalMatrix">
            <summary>
            The inverse model matrix
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.IsMatrixCached">
            <summary>
            Returns if the model matrix is aligned to transformation
            </summary>
        </member>
        <member name="M:Walgelijk.TransformComponent.RecalculateModelMatrix">
            <summary>
            Recalculate the model matrix
            </summary>
        </member>
        <member name="T:Walgelijk.TransformSystem">
            <summary>
            The system responsible for processing transforms
            </summary>
        </member>
        <member name="T:Walgelijk.Cache`2">
            <summary>
            A generic cache object that provides a way to load heavy objects based on a lighter key
            </summary>
            <typeparam name="UnloadedType">The key. This object is usually light and cheap to create</typeparam>
            <typeparam name="LoadedType">The loaded object. This object is usually heavy and expensive to create</typeparam>
        </member>
        <member name="M:Walgelijk.Cache`2.Load(`0)">
            <summary>
            Load or create a <see cref="!:LoadedType"/> from an <see rcef="UnloadedType"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Cache`2.CreateNew(`0)">
            <summary>
            Determines what must be done when an entirely new <see cref="!:LoadedType"/> is created
            </summary>
            <param name="raw"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Cache`2.DisposeOf(`1)">
            <summary>
            Dispose of any resources attached to the loaded type. This is invoked when an entry is unloaded.
            </summary>
            <param name="loaded"></param>
        </member>
        <member name="M:Walgelijk.Cache`2.Unload(`0)">
            <summary>
            Unload an entry and dispose of all attached resources
            </summary>
        </member>
        <member name="M:Walgelijk.Cache`2.Has(`0)">
            <summary>
            Returns if an entry is in the cache
            </summary>
        </member>
        <member name="M:Walgelijk.Cache`2.UnloadAll">
            <summary>
            Clear the cache
            </summary>
        </member>
        <member name="T:Walgelijk.CollectionByType">
            <summary>
            Collection that does not allow duplicates and is able to quicky get objects by their type
            </summary>
        </member>
        <member name="M:Walgelijk.CollectionByType.TryGet``1(``0@)">
            <summary>
            Try to get a value by type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.CollectionByType.Has``1">
            <summary>
            Returns if the collection has an object of the given type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.CollectionByType.TryAdd``1(System.Object)">
            <summary>
            Try to add a value to the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.CollectionByType.GetAll">
            <summary>
            Get all objects regardless of type. Order is undefined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.CollectionByType.Remove``1">
            <summary>
            Remove an object by type
            </summary>
            <returns>if the operation was successful</returns>
        </member>
        <member name="M:Walgelijk.CollectionByType.Dispose">
            <summary>
            Clear everything
            </summary>
        </member>
        <member name="T:Walgelijk.ComponentEntityTuple`1">
            <summary>
            Struct that holds a component and its entity
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Walgelijk.ComponentEntityTuple`1.Component">
            <summary>
            The component of type <see cref="!:T"/>
            </summary>
        </member>
        <member name="P:Walgelijk.ComponentEntityTuple`1.Entity">
            <summary>
            The entity that <see cref="P:Walgelijk.ComponentEntityTuple`1.Component"/> is attached to
            </summary>
        </member>
        <member name="T:Walgelijk.Entity">
            <summary>
            An entity. Does nothing, simply holds an identity. Implicitly an integer.
            </summary>
        </member>
        <member name="P:Walgelijk.Entity.Identity">
            <summary>
            The identity of the entity
            </summary>
        </member>
        <member name="T:Walgelijk.IdentityGenerator">
            <summary>
            Generates entity identities
            </summary>
        </member>
        <member name="M:Walgelijk.IdentityGenerator.Generate">
            <summary>
            Generate a new identity value
            </summary>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.Scene">
            <summary>
            Stores and manages components and systems
            </summary>
        </member>
        <member name="P:Walgelijk.Scene.Game">
            <summary>
            Game this scene belongs to
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnCreateEntity">
            <summary>
            Fired when an entity is created and registered
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnAttachComponent">
            <summary>
            Fired when a component is attached to an entity
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnDetachComponent">
            <summary>
            Fired when a component is detacged from an entity
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnAddSystem">
            <summary>
            Fired when a system is added
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.AddSystem``1(``0)">
            <summary>
            Add a system
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetSystem``1">
            <summary>
            Retrieve a system
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.RemoveSystem``1">
            <summary>
            Remove system from the list. Getting rid of any references to it is not handled, so the object might remain in memory.
            </summary>
            <returns>if the operation was successful</returns>
        </member>
        <member name="M:Walgelijk.Scene.GetSystems">
            <summary>
            Get all systems
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.CreateEntity">
            <summary>
            Register a new entity to the scene
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetEntity(System.Int32)">
            <summary>
            Get the entity struct from an entity ID. Generally not necessary
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.RemoveEntity(System.Int32)">
            <summary>
            Removes the entity from the list. Also removes all attached components. Any references to the entity will become useless as they will point to nothing. References to any attached components are not handled, so they may remain in memory.
            </summary>
            <param name="identity"></param>
            <returns>if the operation was successful</returns>
        </member>
        <member name="M:Walgelijk.Scene.HasEntity(System.Int32)">
            <summary>
            Get if an entity lives in the scene
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetAllEntities">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetAllComponentsFrom(Walgelijk.Entity)">
            <summary>
            Get all components attached to the given entity
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetAllComponentsOfType``1">
            <summary>
            Get all components and entities of a certain type
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetAllComponentsOfTypeNonAlloc``1(Walgelijk.ComponentEntityTuple{``0}[])">
            <summary>
            Get all components and entities of a certain type and puts them in the given array. Returns the amount that was put in.
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetComponentFrom``1(Walgelijk.Entity)">
            <summary>
            Retrieve the first component of the specified type on the given entity
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.TryGetComponentFrom``1(Walgelijk.Entity,``0@)">
            <summary>
            Retrieve the first component of the specified type on the given entity
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.HasComponent``1(Walgelijk.Entity)">
            <summary>
            Get if an entity has a component
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.AttachComponent``1(Walgelijk.Entity,``0)">
            <summary>
            Attach a component to an entity
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.DetachComponent``1(Walgelijk.Entity)">
            <summary>
            Detach a component from an entity
            </summary>
            <returns>if the operation was successful</returns>
        </member>
        <member name="M:Walgelijk.Scene.UpdateSystems">
            <summary>
            Executes all systems. This is typically handled by the window implementation
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.RenderSystems">
            <summary>
            Renders all systems that implement rendering code. This is typically handled by the window implementation
            </summary>
        </member>
        <member name="T:Walgelijk.System">
            <summary>
            Holds game logic
            </summary>
        </member>
        <member name="P:Walgelijk.System.Scene">
            <summary>
            Containing scene
            </summary>
        </member>
        <member name="P:Walgelijk.System.Input">
            <summary>
            Current input state
            </summary>
        </member>
        <member name="P:Walgelijk.System.Time">
            <summary>
            Current time information
            </summary>
        </member>
        <member name="P:Walgelijk.System.RenderQueue">
            <summary>
            Active render queue
            </summary>
        </member>
        <member name="P:Walgelijk.System.Audio">
            <summary>
            Active audio renderer
            </summary>
        </member>
        <member name="M:Walgelijk.System.Initialise">
            <summary>
            Initialise the system
            </summary>
        </member>
        <member name="M:Walgelijk.System.Update">
            <summary>
            Run the logic
            </summary>
        </member>
        <member name="M:Walgelijk.System.PreRender">
            <summary>
            Run pre rendering code
            </summary>
        </member>
        <member name="M:Walgelijk.System.Render">
            <summary>
            Run rendering code
            </summary>
        </member>
        <member name="M:Walgelijk.System.PostRender">
            <summary>
            Run post rendering code
            </summary>
        </member>
        <member name="F:Walgelijk.Color.Stride">
            <summary>
            Size of an instance of this struct in bytes
            </summary>
        </member>
        <member name="F:Walgelijk.Color.R">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:Walgelijk.Color.G">
            <summary>
            Green component
            </summary>
        </member>
        <member name="F:Walgelijk.Color.B">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:Walgelijk.Color.A">
            <summary>
            Alpha component
            </summary>
        </member>
        <member name="M:Walgelijk.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a colour using floating point values ranging from 0 to 1 in standard dynamic range
            </summary>
        </member>
        <member name="M:Walgelijk.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a colour using bytes where 0 is 0.0 and 255 is 1.0
            </summary>
        </member>
        <member name="M:Walgelijk.Color.#ctor(System.String)">
            <summary>
            Create a colour based on a hexadecimal representation, such as "#d42c5e"
            </summary>
        </member>
        <member name="P:Walgelijk.Color.Red">
            <summary>
            Red
            </summary>
        </member>
        <member name="P:Walgelijk.Color.White">
            <summary>
            White
            </summary>
        </member>
        <member name="P:Walgelijk.Color.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="M:Walgelijk.Color.ToBytes">
            <summary>
            Returns a tuple where each element corresponds with a component of the colour
            </summary>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.IShaderManager">
            <summary>
            Shader specific link between the engine and the graphics API
            </summary>
        </member>
        <member name="M:Walgelijk.IShaderManager.SetUniform(Walgelijk.Material,System.String,System.Object)">
            <summary>
            Set a shader program uniform
            </summary>
        </member>
        <member name="M:Walgelijk.IShaderManager.TryGetUniform``1(Walgelijk.Material,System.String,``0@)">
            <summary>
            Try to get a shader program uniform.
            </summary>
            <returns>Boolean indicating whether the operation was successful</returns>
        </member>
        <member name="T:Walgelijk.Material">
            <summary>
            Object that holds unique information specific to a shader
            </summary>
        </member>
        <member name="P:Walgelijk.Material.Shader">
            <summary>
            The shader this material uses
            </summary>
        </member>
        <member name="M:Walgelijk.Material.#ctor(Walgelijk.Shader)">
            <summary>
            Create a material with a shader
            </summary>
            <param name="shader"></param>
        </member>
        <member name="M:Walgelijk.Material.#ctor">
            <summary>
            New instance of the default shader
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Object)">
            <summary>
            Set uniform data
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform(System.String,System.Object@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.HasUniform(System.String)">
            <summary>
            Returns whether a uniform with the given name has been registered in the material
            </summary>
        </member>
        <member name="M:Walgelijk.Material.GetAllUniforms">
            <summary>
            Get all uniforms and their values as an immutable dictionary
            </summary>
        </member>
        <member name="P:Walgelijk.Material.DefaultMaterial">
            <summary>
            The default material with the default shader. This material is shared.
            </summary>
        </member>
        <member name="T:Walgelijk.Primitive">
            <summary>
            Way to draw vertices
            </summary>
        </member>
        <member name="T:Walgelijk.ActionRenderTask">
            <summary>
            Render task that will invoke the action you give. Useful for unique smaller actions
            </summary>
        </member>
        <member name="M:Walgelijk.ActionRenderTask.#ctor(System.Action{Walgelijk.RenderTarget})">
            <summary>
            Crate action render task
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:Walgelijk.ActionRenderTask.Action">
            <summary>
            The action to invoke
            </summary>
        </member>
        <member name="T:Walgelijk.CameraRenderTask">
            <summary>
            Render task that sets the appropriate matrices to match a camera
            </summary>
        </member>
        <member name="P:Walgelijk.CameraRenderTask.View">
            <summary>
            View matrix
            </summary>
        </member>
        <member name="P:Walgelijk.CameraRenderTask.Projection">
            <summary>
            Projection matrix
            </summary>
        </member>
        <member name="T:Walgelijk.ImmediateRenderTask">
            <summary>
            Render task that renders a collection of vertices immediately
            </summary>
        </member>
        <member name="P:Walgelijk.ImmediateRenderTask.ModelMatrix">
            <summary>
            The matrix to transform the vertices with
            </summary>
        </member>
        <member name="P:Walgelijk.ImmediateRenderTask.Vertices">
            <summary>
            Vertices to draw
            </summary>
        </member>
        <member name="P:Walgelijk.ImmediateRenderTask.Material">
            <summary>
            Material to draw with
            </summary>
        </member>
        <member name="P:Walgelijk.ImmediateRenderTask.PrimitiveType">
            <summary>
            Primitive type to draw the vertices as
            </summary>
        </member>
        <member name="T:Walgelijk.IRenderTask">
            <summary>
            A task that can be queued in the render queue
            </summary>
        </member>
        <member name="M:Walgelijk.IRenderTask.Execute(Walgelijk.RenderTarget)">
            <summary>
            Execute the render task on the given render target
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Walgelijk.ShapeRenderTask">
            <summary>
            Render task that renders a vertex buffer with a material
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeRenderTask.ModelMatrix">
            <summary>
            The matrix to transform the vertices with
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeRenderTask.VertexBuffer">
            <summary>
            Vertex buffer to draw
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeRenderTask.Material">
            <summary>
            Material to draw with
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeRenderTask.ScreenSpace">
            <summary>
            Should the task set the view matrix to <see cref="P:System.Numerics.Matrix4x4.Identity"/> 
            </summary>
        </member>
        <member name="T:Walgelijk.Shader">
            <summary>
            Structure that holds the code for a full shader program
            </summary>
        </member>
        <member name="M:Walgelijk.Shader.#ctor(System.String,System.String)">
            <summary>
            Create a shader from vertex and fragment shader code
            </summary>
            <param name="vertexShader"></param>
            <param name="fragmentShader"></param>
        </member>
        <member name="P:Walgelijk.Shader.VertexShader">
            <summary>
            The vertex shader of the program
            </summary>
        </member>
        <member name="P:Walgelijk.Shader.FragmentShader">
            <summary>
            The fragment shader of the program
            </summary>
        </member>
        <member name="M:Walgelijk.Shader.Load(System.String,System.String)">
            <summary>
            Load shader from files
            </summary>
            <param name="vertPath"></param>
            <param name="fragPath"></param>
            <returns></returns>
        </member>
        <member name="P:Walgelijk.Shader.Default">
            <summary>
            Default shader. Renders vertex colours.
            </summary>
        </member>
        <member name="T:Walgelijk.ShaderConstants">
            <summary>
            Useful constants for shader related business 
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderConstants.DefaultFragment">
            <summary>
            Default fragment shader code
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderConstants.WorldSpaceVertex">
            <summary>
            Default vertex shader code
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderConstants.ScreenSpaceVertex">
            <summary>
            Default vertex shader code
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderConstants.ProjectionMatrixUniform">
            <summary>
            Projection matrix uniform name
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderConstants.ViewMatrixUniform">
            <summary>
            View matrix uniform name
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderConstants.ModelMatrixUniform">
            <summary>
            Model matrix uniform name
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderConstants.MainTextureUniform">
            <summary>
            Main texture uniform name
            </summary>
        </member>
        <member name="T:Walgelijk.Texture">
            <summary>
            Represents a texture
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.Width">
            <summary>
            Width of the texture in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.Height">
            <summary>
            Height of the texture in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.Size">
            <summary>
            Size of the image. This returns a <see cref="T:System.Numerics.Vector2"/> with <see cref="P:Walgelijk.Texture.Width"/> and <see cref="P:Walgelijk.Texture.Height"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.WrapMode">
            <summary>
            Wrap mode
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.FilterMode">
            <summary>
            Filter mode. Determines how pixels are interpolated between
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.#ctor(System.Int32,System.Int32,Walgelijk.Color[])">
            <summary>
            Create a texture from a series of pixels
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.Load(System.String,System.Boolean)">
            <summary>
            Load an image from a path
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.GetPixels">
            <summary>
            Get an immutable array of all pixels
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Texture.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get a pixel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Texture.SetPixel(System.Int32,System.Int32,Walgelijk.Color)">
            <summary>
            Set a pixel to a colour
            </summary>
        </member>
        <member name="T:Walgelijk.WrapMode">
            <summary>
            Wrap mode for textures
            </summary>
        </member>
        <member name="F:Walgelijk.WrapMode.Clamp">
            <summary>
            Extends the edge pixels
            </summary>
        </member>
        <member name="F:Walgelijk.WrapMode.Repeat">
            <summary>
            Repeats the UV
            </summary>
        </member>
        <member name="F:Walgelijk.WrapMode.Mirror">
            <summary>
            Mirrors the UV
            </summary>
        </member>
        <member name="T:Walgelijk.FilterMode">
            <summary>
            Filter mode for textures
            </summary>
        </member>
        <member name="F:Walgelijk.FilterMode.Nearest">
            <summary>
            Nearest pixel sampling. Results in pixelated images
            </summary>
        </member>
        <member name="F:Walgelijk.FilterMode.Linear">
            <summary>
            Linear pixel interpolation. Results in somewhat smooth images
            </summary>
        </member>
        <member name="T:Walgelijk.TransformationStack">
            <summary>
            Basically just a stack of 4x4 matrices
            </summary>
        </member>
        <member name="M:Walgelijk.TransformationStack.Pop">
            <summary>
            Pop a matrix off the stack
            </summary>
        </member>
        <member name="M:Walgelijk.TransformationStack.Push(System.Numerics.Matrix4x4)">
            <summary>
            Push a matrix on the stack
            </summary>
        </member>
        <member name="M:Walgelijk.TransformationStack.GetMatrices">
            <summary>
            Get an immutable array of all matrices in the stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.TransformationStack.GetMatrices(System.Numerics.Matrix4x4[])">
            <summary>
            Copies all matrices in the stack into the given buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.TransformationStack.GetFinalMatrix">
            <summary>
            Get the final matrix. The result is cached.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.Vertex">
            <summary>
            A vertex
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.Stride">
            <summary>
            Size of an instance of this struct in bytes
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.Position">
            <summary>
            Vertex position
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.TexCoords">
            <summary>
            Vertex UV coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.Color">
            <summary>
            Vertex colour
            </summary>
        </member>
        <member name="M:Walgelijk.Vertex.#ctor(System.Numerics.Vector3,System.Numerics.Vector2,Walgelijk.Color)">
            <summary>
            Create a vertex with a position, UV, and colour
            </summary>
            <param name="position"></param>
            <param name="texCoords"></param>
            <param name="color"></param>
        </member>
        <member name="M:Walgelijk.Vertex.#ctor(System.Numerics.Vector3)">
            <summary>
            Create a vertex with a position. White and zero UV by default;
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Walgelijk.Vertex.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a vertex with a position.  White and zero UV by default;
            </summary>
            <param name="position"></param>
        </member>
        <member name="T:Walgelijk.VertexBuffer">
            <summary>
            Holds all the data needed to draw vertices to the screen
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.PrimitiveType">
            <summary>
            The way vertices are drawn
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer.#ctor(Walgelijk.Vertex[],System.UInt32[])">
            <summary>
            Create a VertexBuffer with the specified vertices and indices
            </summary>
            <param name="vertices"></param>
            <param name="indices"></param>
        </member>
        <member name="M:Walgelijk.VertexBuffer.#ctor(Walgelijk.Vertex[])">
            <summary>
            Create a VertexBuffer with the specified vertices. The indices will be set automatically
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:Walgelijk.VertexBuffer.#ctor">
            <summary>
            Create an empty vertex buffer
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.HasChanged">
            <summary>
            Whether the data needs to be uploaded to the GPU again
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.Vertices">
            <summary>
            Vertices to draw. <b>Do not forget to set the corresponding indices, or use <see cref="M:Walgelijk.VertexBuffer.GenerateIndices"/></b>
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.Indices">
            <summary>
            Indices to draw vertices by
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.IndexCount">
            <summary>
            Amount of indices
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.VertexCount">
            <summary>
            Amount of vertices
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer.ForceUpdate">
            <summary>
            Force the data to be reuploaded to the GPU
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer.GenerateIndices">
            <summary>
            Generates indices that simply walk the vertex array from beginning to end
            </summary>
        </member>
        <member name="T:Walgelijk.Game">
            <summary>
            The link between the scene and the window
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Main">
            <summary>
            The last instance that was created
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Window">
            <summary>
            Currently active window
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Scene">
            <summary>
            Currently active scene
            </summary>
        </member>
        <member name="P:Walgelijk.Game.RenderQueue">
            <summary>
            Returns the <see cref="T:Walgelijk.RenderQueue"/> that belongs to <see cref="P:Walgelijk.Game.Window"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Game.AudioRenderer">
            <summary>
            The main audio renderer
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Profiling">
            <summary>
            The game profiler
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Time">
            <summary>
            Returns the <see cref="T:Walgelijk.Time"/> information that belongs to <see cref="P:Walgelijk.Game.Window"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Game.#ctor(Walgelijk.Window,Walgelijk.AudioRenderer)">
            <summary>
            Create a game with a window and an optional audio renderer. If the audio renderer is not set, the game won't be able to play any sounds
            </summary>
        </member>
        <member name="M:Walgelijk.Game.Start">
            <summary>
            Start the game loop
            </summary>
        </member>
        <member name="T:Walgelijk.ConsoleLogger">
            <summary>
            The default logger. Logs to the console.
            </summary>
        </member>
        <member name="T:Walgelijk.ILogger">
            <summary>
            Interface for basic logging
            </summary>
        </member>
        <member name="M:Walgelijk.ILogger.Log(System.Object)">
            <summary>
            Log information
            </summary>
        </member>
        <member name="M:Walgelijk.ILogger.Warn(System.Object)">
            <summary>
            Log a warning
            </summary>
        </member>
        <member name="M:Walgelijk.ILogger.Error(System.Object)">
            <summary>
            Log an error
            </summary>
        </member>
        <member name="T:Walgelijk.Logger">
            <summary>
            Access the logging implementation
            </summary>
        </member>
        <member name="P:Walgelijk.Logger.Implementation">
            <summary>
            The logging implementation used. Set to <see cref="T:Walgelijk.ConsoleLogger"/> by default
            </summary>
        </member>
        <member name="M:Walgelijk.Logger.Log(System.Object)">
            <summary>
            Log information
            </summary>
        </member>
        <member name="M:Walgelijk.Logger.Warn(System.Object)">
            <summary>
            Log a warning
            </summary>
        </member>
        <member name="M:Walgelijk.Logger.Error(System.Object)">
            <summary>
            Log an error
            </summary>
        </member>
        <member name="T:Walgelijk.Profiler">
            <summary>
            Provides performance information
            </summary>
        </member>
        <member name="P:Walgelijk.Profiler.UpdatesPerSecond">
            <summary>
            Amount of updates in the last second
            </summary>
        </member>
        <member name="P:Walgelijk.Profiler.FramesPerSecond">
            <summary>
            Amount of frames rendered in the last second
            </summary>
        </member>
        <member name="P:Walgelijk.Profiler.DrawQuickProfiler">
            <summary>
            Enables or disables a small debug performance information display
            </summary>
        </member>
        <member name="M:Walgelijk.Profiler.#ctor(Walgelijk.Game)">
            <summary>
            Create a profiler for the given game
            </summary>
            <param name="game"></param>
        </member>
        <member name="M:Walgelijk.Profiler.Update">
            <summary>
            Force the profiler to update. Should be handled by the window.
            </summary>
        </member>
        <member name="M:Walgelijk.Profiler.Render">
            <summary>
            Force the profiler to calculate render information. Should be handled by the window.
            </summary>
        </member>
        <member name="T:Walgelijk.Resources">
            <summary>
            Global path based resource storage
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.Initialise">
            <summary>
            Initialise 
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.Load``1(System.String)">
            <summary>
            Load the resource at the given path. Will throw an exception if there is no resource loader found for the type, or if the file at the path is not of the given type.
            </summary>
            <typeparam name="T">The type of the object to load</typeparam>
            <param name="path">The path of the file</param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Resources.CanLoad(System.Type)">
            <summary>
            Returns if the resource manager can load objects of the given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Resources.RegisterType(System.Type,System.Func{System.String,System.Object})">
            <summary>
            Register a resource type with its loader
            </summary>
            <param name="type">Type of the resource</param>
            <param name="loadFunction">The function that returns the object given a path</param>
            <returns>Whether the registration succeeded</returns>
        </member>
        <member name="T:Walgelijk.Time">
            <summary>
            Structure that holds frame specific time data
            </summary>
        </member>
        <member name="P:Walgelijk.Time.UpdateDeltaTime">
            <summary>
            Returns the amount of seconds that have passed since the last update frame
            </summary>
        </member>
        <member name="P:Walgelijk.Time.RenderDeltaTime">
            <summary>
            Returns the amount of seconds that have passed since the last rendered frame
            </summary>
        </member>
        <member name="P:Walgelijk.Time.SecondsSinceLoad">
            <summary>
            Returns the amount of seconds that have passed since the game was launched
            </summary>
        </member>
        <member name="T:Walgelijk.Font">
            <summary>
            Object that holds font information and pages
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Name">
            <summary>
            Display name of the font
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Size">
            <summary>
            Retrieve the point size this font was loaded with
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Walgelijk.Font.Bold" -->
        <!-- Badly formed XML comment ignored for member "P:Walgelijk.Font.Italic" -->
        <member name="P:Walgelijk.Font.Width">
            <summary>
            Page width in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Height">
            <summary>
            Page height in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Font.LineHeight">
            <summary>
            Line height in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Pages">
            <summary>
            Array of texture pages this font uses
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Glyphs">
            <summary>
            Glyphs by character
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Kernings">
            <summary>
            Kernings by <see cref="T:Walgelijk.KerningPair"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Material">
            <summary>
            Material this font uses. Be aware this may be shared across text. Use <see cref="M:Walgelijk.FontLoader.CreateFontMaterial(Walgelijk.Font)"/> to create a new material.
            </summary>
        </member>
        <member name="M:Walgelijk.Font.Load(System.String)">
            <summary>
            Load a font from a metadata file (BMFont .fnt)
            </summary>
        </member>
        <member name="M:Walgelijk.Font.GetGlyph(System.Char,Walgelijk.Glyph)">
            <summary>
            Get the glyph for a character. 
            </summary>
        </member>
        <member name="M:Walgelijk.Font.GetKerning(System.Char,System.Char)">
            <summary>
            Get kerning for two characters
            </summary>
        </member>
        <member name="F:Walgelijk.Font.Default">
            <summary>
            The default font
            </summary>
        </member>
        <member name="T:Walgelijk.KerningPair">
            <summary>
            The two characters a kerning amount applies to
            </summary>
        </member>
        <member name="T:Walgelijk.Glyph">
            <summary>
            Structure with font glyph information
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.Identity">
            <summary>
            Character this glyph belongs to
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.X">
            <summary>
            X position on the page in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.Y">
            <summary>
            Y position on the page in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.Width">
            <summary>
            Width of the page in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.Height">
            <summary>
            Height of the page in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.XOffset">
            <summary>
            Horizontal offset of this character in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.YOffset">
            <summary>
            Vertical offset of this character in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.Advance">
            <summary>
            How many pixels to advance the cursor after this glyph
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.Page">
            <summary>
            Page index of the glyph
            </summary>
        </member>
        <member name="T:Walgelijk.Kerning">
            <summary>
            Structure with kerning information
            </summary>
        </member>
        <member name="F:Walgelijk.Kerning.FirstChar">
            <summary>
            Preceding character
            </summary>
        </member>
        <member name="F:Walgelijk.Kerning.SecondChar">
            <summary>
            Current character
            </summary>
        </member>
        <member name="F:Walgelijk.Kerning.Amount">
            <summary>
            Offset amount
            </summary>
        </member>
        <member name="T:Walgelijk.TextComponent">
            <summary>
            IShapeComponent that holds the information necessary to draw text
            </summary>
        </member>
        <member name="M:Walgelijk.TextComponent.#ctor(System.String,Walgelijk.Font)">
            <summary>
            Create a text component
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.String">
            <summary>
            Displayed string. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.Font">
            <summary>
            Used font. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.Color">
            <summary>
            Text colour. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.TrackingMultiplier">
            <summary>
            Distance between letters. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.KerningMultiplier">
            <summary>
            Kerning amount multiplier. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.LineHeightMultiplier">
            <summary>
            Distance between each line.  Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="T:Walgelijk.TextMeshGenerator">
            <summary>
            Utility class that provides text mesh generation functions 
            </summary>
        </member>
        <member name="M:Walgelijk.TextMeshGenerator.GenerateVertices(System.String,Walgelijk.Font,Walgelijk.Vertex[],Walgelijk.Color,System.Single,System.Single,System.Single)">
            <summary>
            Generate 2D text mesh
            </summary>
            <param name="displayString">Text to render</param>
            <param name="font">Font to render with</param>
            <param name="vertices">Vertex array that will be populated. This need to be the length of displayString * 4</param>
            <param name="color">Color to set the vertices with</param>
            <param name="kerningAmount">Kerning multiplier</param>
            <param name="lineHeightMultiplier">Line height multiplier</param>
            <param name="trackingMultiplier">Tracking multiplier</param>
        </member>
        <member name="M:Walgelijk.Utilities.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolate between two floats
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Linearly interpolate between two floats
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomFloat(System.Single,System.Single)">
            <summary>
            Returns a random float in a range
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomInt(System.Int32,System.Int32)">
            <summary>
            Returns a random int in a range
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomByte(System.Byte,System.Byte)">
            <summary>
            Returns a random int in a range
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomColour(System.Single)">
            <summary>
            Returns a colour where the RGB components are random
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamp a value within a range
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Utilities.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamp a value within a range
            </summary>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.InputState">
            <summary>
            Struct that simply holds input data
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.MouseButtonsDown">
            <summary>
            All mouse buttons that have been pressed last frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.MouseButtonsHeld">
            <summary>
            All mouse buttons that are currently held
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.MouseButtonsUp">
            <summary>
            All moues buttons that have been released last frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.KeysDown">
            <summary>
            All keys that have been pressed last frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.KeysHeld">
            <summary>
            All keys that are currently held
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.KeysUp">
            <summary>
            All keys that were released last frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.WindowMousePosition">
            <summary>
            Mouse position in window coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.WorldMousePosition">
            <summary>
            Mouse position in world coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.WindowMouseDelta">
            <summary>
            Mouse movement delta over 1 frame in window coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.WorldMouseDelta">
            <summary>
            Mouse movement delta over 1 frame in world coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.MouseScrollDelta">
            <summary>
            Mouse wheel delta over 1 frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.AnyKey">
            <summary>
            Returns if any key is down
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.AnyMouseButton">
            <summary>
            Returns if any mouse button is down
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.TextEntered">
            <summary>
            The text entered last frame
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsKeyHeld(Walgelijk.Key)">
            <summary>
            Returns if the key is held
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsKeyPressed(Walgelijk.Key)">
            <summary>
            Retusn if the key was pressed
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsKeyReleased(Walgelijk.Key)">
            <summary>
            Returns if the key was released
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsButtonHeld(Walgelijk.Button)">
            <summary>
            Returns if the key is held
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsButtonPressed(Walgelijk.Button)">
            <summary>
            Retusn if the key was pressed
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsButtonReleased(Walgelijk.Button)">
            <summary>
            Returns if the key was released
            </summary>
        </member>
        <member name="T:Walgelijk.RenderQueue">
            <summary>
            This object manages a render queue of <see cref="T:Walgelijk.IRenderTask"/>
            </summary>
        </member>
        <member name="M:Walgelijk.RenderQueue.RenderAndReset(Walgelijk.RenderTarget)">
            <summary>
            Render the queue by dequeuing and executing each entry
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Walgelijk.RenderQueue.Enqueue(Walgelijk.IRenderTask)">
            <summary>
            Add a task to the queue
            </summary>
            <param name="task"></param>
        </member>
        <member name="T:Walgelijk.RenderTarget">
            <summary>
            A target that can be rendered to
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.Size">
            <summary>
            Size of the target. This should be automatically set to the window size
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.ClearColour">
            <summary>
            Colour to clear with
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.ViewMatrix">
            <summary>
            The view matrix
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.ProjectionMatrix">
            <summary>
            The projection matrix
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.ModelMatrix">
            <summary>
            The model matrix
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.AspectRatio">
            <summary>
            Calculate the aspect ratio from the current rendertarget size. Identical to Size.Y / Size.X
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTarget.Clear">
            <summary>
            Clear target
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTarget.Draw(Walgelijk.VertexBuffer,Walgelijk.Material)">
            <summary>
            Draw a vertex buffer
            </summary>
            <param name="vertexBuffer">VertexBuffer to draw</param>
            <param name="material">Material to draw it with</param>
        </member>
        <member name="M:Walgelijk.RenderTarget.Draw(Walgelijk.Vertex[],Walgelijk.Primitive,Walgelijk.Material)">
            <summary>
            Draw vertices immediately
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.CalculatedWindowMatrix">
            <summary>
            An orthographic projection matrix matrix where the top left is 0,0 and the bottom right is <see cref="P:Walgelijk.RenderTarget.Size"/>
            </summary>
        </member>
        <member name="T:Walgelijk.Window">
            <summary>
            A game window
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Title">
            <summary>
            Title of the window
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Position">
            <summary>
            Position of the window on the display in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Size">
            <summary>
            Size of the window in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Window.TargetFrameRate">
            <summary>
            Speed the game should render at
            </summary>
        </member>
        <member name="P:Walgelijk.Window.TargetUpdateRate">
            <summary>
            Speed the game should run updates at
            </summary>
        </member>
        <member name="P:Walgelijk.Window.VSync">
            <summary>
            Should vertical synchronisation be enabled
            </summary>
        </member>
        <member name="P:Walgelijk.Window.IsOpen">
            <summary>
            Is the window open?
            </summary>
        </member>
        <member name="P:Walgelijk.Window.HasFocus">
            <summary>
            Does the window have user focus?
            </summary>
        </member>
        <member name="P:Walgelijk.Window.IsVisible">
            <summary>
            Is the window visible?
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Resizable">
            <summary>
            Is the window resizable?
            </summary>
        </member>
        <member name="P:Walgelijk.Window.InputState">
            <summary>
            The current input state
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Time">
            <summary>
            Time information
            </summary>
        </member>
        <member name="P:Walgelijk.Window.RenderQueue">
            <summary>
            The window render queue. It stores the render tasks and is emptied and executed every render frame.
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Game">
            <summary>
            The <see cref="T:Walgelijk.Game"/> this window originates from
            </summary>
        </member>
        <member name="P:Walgelijk.Window.RenderTarget">
            <summary>
            RenderTarget for this window
            </summary>
        </member>
        <member name="P:Walgelijk.Window.ShaderManager">
            <summary>
            Provides shader specific functions
            </summary>
        </member>
        <member name="E:Walgelijk.Window.OnResize">
            <summary>
            Fires when the window is resized. Provides new size
            </summary>
        </member>
        <member name="E:Walgelijk.Window.OnMove">
            <summary>
            Fires when the window is moved. Provides new position
            </summary>
        </member>
        <member name="E:Walgelijk.Window.OnFileDrop">
            <summary>
            Fires when a file is dropped on the window, Provides file paths
            </summary>
        </member>
        <member name="E:Walgelijk.Window.OnClose">
            <summary>
            Fires when the window is going to close
            </summary>
        </member>
        <member name="M:Walgelijk.Window.StartLoop">
            <summary>
            Start the main game loop
            </summary>
        </member>
        <member name="M:Walgelijk.Window.Close">
            <summary>
            Close the window and stop the game loop
            </summary>
        </member>
        <member name="M:Walgelijk.Window.ScreenToWindowPoint(System.Numerics.Vector2)">
            <summary>
            Turn screen coordinates into window coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Window.WindowToScreenPoint(System.Numerics.Vector2)">
            <summary>
            Turn window coordinates into screen coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Window.InvokeResizeEvent(System.Numerics.Vector2)">
            <summary>
            Invoke the resize event
            </summary>
            <param name="newSize"></param>
        </member>
        <member name="M:Walgelijk.Window.InvokeMoveEvent(System.Numerics.Vector2)">
            <summary>
            Invoke the move event
            </summary>
            <param name="newPosition"></param>
        </member>
        <member name="M:Walgelijk.Window.InvokeFileDropEvent(System.String[])">
            <summary>
            Invoke the file drop event
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Walgelijk.Window.InvokeCloseEvent">
            <summary>
            Invoke the close event
            </summary>
        </member>
    </members>
</doc>
