<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Walgelijk</name>
    </assembly>
    <members>
        <member name="T:Walgelijk.AudioRenderer">
            <summary>
            The global audio renderer 
            </summary>
        </member>
        <member name="P:Walgelijk.AudioRenderer.Volume">
            <summary>
            Master volume. Ranges from 0.0 to 1.0
            </summary>
        </member>
        <member name="P:Walgelijk.AudioRenderer.Muted">
            <summary>
            Mute all audio
            </summary>
        </member>
        <member name="P:Walgelijk.AudioRenderer.ListenerPosition">
            <summary>
            Position of the listener in world space
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Play(Walgelijk.Sound@)">
            <summary>
            Simply play a sound (or resumes, if paused)
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.PlayOnce(Walgelijk.Sound)">
            <summary>
            Play a sound once and let it overlap itself
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Play(Walgelijk.Sound@,System.Numerics.Vector2)">
            <summary>
            Play sound at a position in the world (or resumes, if paused)
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.PlayOnce(Walgelijk.Sound,System.Numerics.Vector2)">
            <summary>
            Play sound at a position in the world and let it overlap itself
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Stop(Walgelijk.Sound@)">
            <summary>
            Stop a specific sound
            </summary>
            <param name="sound"></param>
        </member>
        <member name="M:Walgelijk.AudioRenderer.Pause(Walgelijk.Sound@)">
            <summary>
            Pause a specific sound
            </summary>
            <param name="sound"></param>
        </member>
        <member name="M:Walgelijk.AudioRenderer.StopAll">
            <summary>
            Stop all sounds
            </summary>
        </member>
        <member name="M:Walgelijk.AudioRenderer.LoadSound(System.String)">
            <summary>
            Load a sound from file
            </summary>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.EmptyAudioRenderer">
            <summary>
            Placeholder audio renderer that is used when none is set
            </summary>
        </member>
        <member name="T:Walgelijk.Sound">
            <summary>
            Object that contains sound data
            </summary>
        </member>
        <member name="P:Walgelijk.Sound.Channels">
            <summary>
            Number of channels
            </summary>
        </member>
        <member name="P:Walgelijk.Sound.Data">
            <summary>
            Audio data
            </summary>
        </member>
        <member name="P:Walgelijk.Sound.SampleRate">
            <summary>
            Sample rate
            </summary>
        </member>
        <member name="P:Walgelijk.Sound.Duration">
            <summary>
            Duration of the sound
            </summary>
        </member>
        <member name="P:Walgelijk.Sound.Looping">
            <summary>
            Determines if the sound is looping
            </summary>
        </member>
        <member name="M:Walgelijk.Sound.#ctor(System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Int32)">
            <summary>
            Create a sound from raw data
            </summary>
        </member>
        <member name="T:Walgelijk.CameraComponent">
            <summary>
            Component that holds camera data
            </summary>
        </member>
        <member name="P:Walgelijk.CameraComponent.OrthographicSize">
            <summary>
            The orthographic size of this camera
            </summary>
        </member>
        <member name="P:Walgelijk.CameraComponent.PixelsPerUnit">
            <summary>
            Amount of pixels per translation unit
            </summary>
        </member>
        <member name="P:Walgelijk.CameraComponent.TaskOrder">
            <summary>
            The order of this camera's tasks. <see cref="F:System.Int32.MinValue"/> by default
            </summary>
        </member>
        <member name="P:Walgelijk.CameraComponent.ClearColour">
            <summary>
            Colour to clear with
            </summary>
        </member>
        <member name="P:Walgelijk.CameraComponent.Clear">
            <summary>
            Should this camera clear the target before rendering?
            </summary>
        </member>
        <member name="T:Walgelijk.CameraSystem">
            <summary>
            System that manages the built in <see cref="T:Walgelijk.CameraComponent"/>
            </summary>
        </member>
        <member name="P:Walgelijk.CameraSystem.MainCameraEntity">
            <summary>
            Main camera entity
            </summary>
        </member>
        <member name="P:Walgelijk.CameraSystem.MainCameraComponent">
            <summary>
            Main camera component
            </summary>
        </member>
        <member name="P:Walgelijk.CameraSystem.MainCameraTransform">
            <summary>
            Main camera transform component
            </summary>
        </member>
        <member name="M:Walgelijk.CameraSystem.SetMainCamera(Walgelijk.Entity)">
            <summary>
            Set the main camera for this system
            </summary>
        </member>
        <member name="T:Walgelijk.DebugCameraSystem">
            <summary>
            Provides basic WASD + - camera controls
            </summary>
        </member>
        <member name="P:Walgelijk.DebugCameraSystem.Speed">
            <summary>
            Movement speed
            </summary>
        </member>
        <member name="P:Walgelijk.DebugCameraSystem.ZoomFactor">
            <summary>
            Zoom speed
            </summary>
        </member>
        <member name="T:Walgelijk.IPostProcessingEffect">
            <summary>
            A post processing effect
            </summary>
        </member>
        <member name="M:Walgelijk.IPostProcessingEffect.Process(Walgelijk.RenderTexture,Walgelijk.RenderTexture,Walgelijk.IGraphics,Walgelijk.Scene)">
            <summary>
            Process the current graphics state
            </summary>
        </member>
        <member name="T:Walgelijk.PostProcessingComponent">
            <summary>
            A post processing effect container
            </summary>
        </member>
        <member name="P:Walgelijk.PostProcessingComponent.Begin">
            <summary>
            The render order at which to start applying effects
            </summary>
        </member>
        <member name="P:Walgelijk.PostProcessingComponent.End">
            <summary>
            The render order at which to stop applying effects
            </summary>
        </member>
        <member name="P:Walgelijk.PostProcessingComponent.Effects">
            <summary>
            Ordered collection of effects
            </summary>
        </member>
        <member name="P:Walgelijk.PostProcessingComponent.EffectTask">
            <summary>
            The task that applies the effects
            </summary>
        </member>
        <member name="T:Walgelijk.PostProcessingSystem">
            <summary>
            System that handles post processing effects with <see cref="T:Walgelijk.PostProcessingComponent"/> and <see cref="T:Walgelijk.IPostProcessingEffect"/>
            </summary>
        </member>
        <member name="T:Walgelijk.ShaderPostProcessor">
            <summary>
            A basic shader post processor. It applies a material to the entire image
            </summary>
        </member>
        <member name="P:Walgelijk.ShaderPostProcessor.Material">
            <summary>
            The material to apply
            </summary>
        </member>
        <member name="P:Walgelijk.ShaderPostProcessor.TextureUniform">
            <summary>
            Name of the main texture uniform
            </summary>
        </member>
        <member name="M:Walgelijk.ShaderPostProcessor.#ctor(Walgelijk.Material)">
            <summary>
            Construct a post processor with the given material
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:Walgelijk.ShaderPostProcessor.Process(Walgelijk.RenderTexture,Walgelijk.RenderTexture,Walgelijk.IGraphics,Walgelijk.Scene)">
            <summary>
            Blits the source texture to the destination texture using <see cref="P:Walgelijk.ShaderPostProcessor.Material"/>
            </summary>
        </member>
        <member name="T:Walgelijk.QuadShapeComponent">
            <summary>
            Primitive quad component. Vertices can't be altered.
            </summary>
        </member>
        <member name="P:Walgelijk.QuadShapeComponent.Material">
            <summary>
            Material that is drawn with
            </summary>
        </member>
        <member name="M:Walgelijk.QuadShapeComponent.#ctor(System.Boolean)">
            <summary>
            Create a quad shape component
            </summary>
        </member>
        <member name="T:Walgelijk.RectangleShapeComponent">
            <summary>
            Basic rectangle renderer data
            </summary>
        </member>
        <member name="P:Walgelijk.RectangleShapeComponent.Color">
            <summary>
            Colour of the rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.RectangleShapeComponent.Size">
            <summary>
            Size of the rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.RectangleShapeComponent.Material">
            <summary>
            Material that is drawn with
            </summary>
        </member>
        <member name="P:Walgelijk.RectangleShapeComponent.Pivot">
            <summary>
            Pivot point of the rectangle ranging from (0.0, 0.0) to (1.0, 1.0). Default is (0.5, 0.5).
            </summary>
        </member>
        <member name="M:Walgelijk.RectangleShapeComponent.#ctor">
            <summary>
            Create a rectangle renderer component
            </summary>
        </member>
        <member name="T:Walgelijk.ShapeComponent">
            <summary>
            Interface that provides a <see cref="P:Walgelijk.ShapeComponent.VertexBuffer"/> and <see cref="T:Walgelijk.ShapeRenderTask"/>
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.VertexBuffer">
            <summary>
            VertexBuffer that is generated. It's best not to edit this unless you really need to.
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.RenderTask">
            <summary>
            The render task that is generated. It's best not to edit this unless you really need to.
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.ScreenSpace">
            <summary>
            Determines if the shape should be rendered in screenspace
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.RenderOrder">
            <summary>
            Order of the rendering task
            </summary>
        </member>
        <member name="P:Walgelijk.ShapeComponent.Visible">
            <summary>
            Whether or not the component is rendered by the system
            </summary>
        </member>
        <member name="T:Walgelijk.ShapeRendererSystem">
            <summary>
            System that renders components that implement <see cref="T:Walgelijk.ShapeComponent"/>
            </summary>
        </member>
        <member name="T:Walgelijk.SplashScreen">
            <summary>
            Utility struct that provides splash screen creation functionality
            </summary>
        </member>
        <member name="M:Walgelijk.SplashScreen.CreateScene(Walgelijk.SplashScreen.Logo[],System.Action)">
            <summary>
            Create a splash screen scene
            </summary>
            <param name="logos">Array of logos</param>
            <param name="onEnd">What to do when the logo sequence ends. This is usually a scene change</param>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.SplashScreen.SplashScreenComponent">
            <summary>
            Component with splash screen information
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.Logos">
            <summary>
            Array of logos
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.CurrentTime">
            <summary>
            Current elapsed time since the last logo change
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.Lifetime">
            <summary>
            Current elapsed time since the creation
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.CurrentLogoIndex">
            <summary>
            Current logo index
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.SplashScreenComponent.OnEnd">
            <summary>
            What to do once all logos have been displayed
            </summary>
        </member>
        <member name="T:Walgelijk.SplashScreen.Logo">
            <summary>
            Structure with information on how to display a logo
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.Logo.Texture">
            <summary>
            Texture to display
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.Logo.Duration">
            <summary>
            How long the logo should appear for
            </summary>
        </member>
        <member name="F:Walgelijk.SplashScreen.Logo.Sound">
            <summary>
            Sound to play
            </summary>
        </member>
        <member name="M:Walgelijk.SplashScreen.Logo.#ctor(Walgelijk.IReadableTexture,System.Single,Walgelijk.Sound)">
            <summary>
            Create a logo with a texture and an optional sound
            </summary>
        </member>
        <member name="T:Walgelijk.SplashScreen.SplashScreenSystem">
            <summary>
            System that handles <see cref="T:Walgelijk.SplashScreen.SplashScreenComponent"/>
            </summary>
        </member>
        <member name="T:Walgelijk.TransformComponent">
            <summary>
            Basic component that holds transformation data
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.Parent">
            <summary>
            Parent entity with a transform
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.Position">
            <summary>
            Position of the transform in world space
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.Rotation">
            <summary>
            Rotation in degrees of the transform in world space
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.Scale">
            <summary>
            Scale multiplier of the transform
            </summary>
        </member>
        <member name="P:Walgelijk.TransformComponent.LocalPivot">
            <summary>
            The local pivot point that is the center of all transformations.
            </summary>
        </member>
        <member name="F:Walgelijk.TransformComponent.LocalToWorldMatrix">
            <summary>
            The generated model matrix
            </summary>
        </member>
        <member name="F:Walgelijk.TransformComponent.WorldToLocalMatrix">
            <summary>
            The inverse model matrix
            </summary>
        </member>
        <member name="F:Walgelijk.TransformComponent.IsMatrixCached">
            <summary>
            Returns if the model matrix is aligned to transformation
            </summary>
        </member>
        <member name="M:Walgelijk.TransformComponent.RecalculateModelMatrix(System.Numerics.Matrix4x4)">
            <summary>
            Recalculate the model matrix considering a containing matrix. This is usually <see cref="P:System.Numerics.Matrix4x4.Identity"/>
            </summary>
        </member>
        <member name="T:Walgelijk.TransformSystem">
            <summary>
            The system responsible for processing transforms
            </summary>
        </member>
        <member name="T:Walgelijk.Cache`2">
            <summary>
            A generic cache object that provides a way to load heavy objects based on a lighter key
            </summary>
            <typeparam name="UnloadedType">The key. This object is usually light and cheap to create</typeparam>
            <typeparam name="LoadedType">The loaded object. This object is usually heavy and expensive to create</typeparam>
        </member>
        <member name="M:Walgelijk.Cache`2.Load(`0)">
            <summary>
            Load or create a <typeparamref name="LoadedType"/> from an <typeparamref name="UnloadedType"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Cache`2.CreateNew(`0)">
            <summary>
            Determines what must be done when an entirely new <typeparamref name="LoadedType"/> is created
            </summary>
            <param name="raw"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Cache`2.DisposeOf(`1)">
            <summary>
            Dispose of any resources attached to the loaded type. This is invoked when an entry is unloaded.
            </summary>
            <param name="loaded"></param>
        </member>
        <member name="M:Walgelijk.Cache`2.Unload(`0)">
            <summary>
            Unload an entry and dispose of all attached resources
            </summary>
        </member>
        <member name="M:Walgelijk.Cache`2.Has(`0)">
            <summary>
            Returns if an entry is in the cache
            </summary>
        </member>
        <member name="M:Walgelijk.Cache`2.UnloadAll">
            <summary>
            Clear the cache
            </summary>
        </member>
        <member name="T:Walgelijk.Curve`1">
            <summary>
            Linear curve
            </summary>
        </member>
        <member name="P:Walgelijk.Curve`1.Keys">
            <summary>
            Value keys
            </summary>
        </member>
        <member name="M:Walgelijk.Curve`1.#ctor(Walgelijk.Curve{`0}.Key[])">
            <summary>
            Construct a curve
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Walgelijk.Curve`1.Evaluate(System.Single)">
            <summary>
            Get value at a position in the curve using linear interpolation
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Curve`1.Lerp(`0,`0,System.Single)">
            <summary>
            Linear interpolation implementation for type <typeparamref name="T"/>
            </summary>
        </member>
        <member name="T:Walgelijk.Curve`1.Key">
            <summary>
            Key with a position and value of type <typeparamref name="T"/>
            </summary>
        </member>
        <member name="F:Walgelijk.Curve`1.Key.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:Walgelijk.Curve`1.Key.Position">
            <summary>
            Position in range 0, 1
            </summary>
        </member>
        <member name="M:Walgelijk.Curve`1.Key.#ctor(`0,System.Single)">
            <summary>
            Construct a Key
            </summary>
        </member>
        <member name="T:Walgelijk.FloatCurve">
            <summary>
            <see cref="T:System.Single"/> curve
            </summary>
        </member>
        <member name="T:Walgelijk.ColorCurve">
            <summary>
            <see cref="T:Walgelijk.Color"/> curve
            </summary>
        </member>
        <member name="T:Walgelijk.Vec4Curve">
            <summary>
            <see cref="T:System.Numerics.Vector4"/> curve
            </summary>
        </member>
        <member name="T:Walgelijk.Vec2Curve">
            <summary>
            <see cref="T:System.Numerics.Vector2"/> curve
            </summary>
        </member>
        <member name="T:Walgelijk.Vec3Curve">
            <summary>
            <see cref="T:System.Numerics.Vector3"/> curve
            </summary>
        </member>
        <member name="T:Walgelijk.CollectionByType">
            <summary>
            Collection that is able to quicky get objects by their type
            </summary>
        </member>
        <member name="M:Walgelijk.CollectionByType.TryGet``1(``0@)">
            <summary>
            Try to get a value by type
            </summary>
        </member>
        <member name="M:Walgelijk.CollectionByType.TryGetAll``1(System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Try to get values by type
            </summary>
        </member>
        <member name="M:Walgelijk.CollectionByType.Has``1">
            <summary>
            Returns if the collection has an object of the given type
            </summary>
        </member>
        <member name="M:Walgelijk.CollectionByType.HasObject(System.Object)">
            <summary>
            Returns if the collection has a specific object instance
            </summary>
        </member>
        <member name="M:Walgelijk.CollectionByType.TryAdd``1(System.Object)">
            <summary>
            Try to add a value to the collection
            </summary>
        </member>
        <member name="M:Walgelijk.CollectionByType.GetAll">
            <summary>
            Get all objects regardless of type. Order is undefined.
            </summary>
        </member>
        <member name="M:Walgelijk.CollectionByType.Remove``1">
            <summary>
            Remove all objects by type
            </summary>
        </member>
        <member name="M:Walgelijk.CollectionByType.Dispose">
            <summary>
            Clear everything
            </summary>
        </member>
        <member name="T:Walgelijk.ComponentRelationAttribute">
            <summary>
            Base class for attributes that indicate a component relationship
            </summary>
        </member>
        <member name="P:Walgelijk.ComponentRelationAttribute.Types">
            <summary>
            Relevant component types
            </summary>
        </member>
        <member name="T:Walgelijk.Entity">
            <summary>
            An entity. Does nothing, simply holds an identity. Implicitly an integer.
            </summary>
        </member>
        <member name="P:Walgelijk.Entity.Identity">
            <summary>
            The identity of the entity
            </summary>
        </member>
        <member name="T:Walgelijk.EntityWith`1">
            <summary>
            Struct that holds a component and its entity
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Walgelijk.EntityWith`1.Component">
            <summary>
            The component of type <see cref="!:T"/>
            </summary>
        </member>
        <member name="P:Walgelijk.EntityWith`1.Entity">
            <summary>
            The entity that <see cref="P:Walgelijk.EntityWith`1.Component"/> is attached to
            </summary>
        </member>
        <member name="T:Walgelijk.IdentityGenerator">
            <summary>
            Generates entity identities
            </summary>
        </member>
        <member name="M:Walgelijk.IdentityGenerator.Generate">
            <summary>
            Generate a new identity value
            </summary>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.Prefab">
            <summary>
            Structure that holds an entity and its components. Meant for serialisation.
            </summary>
        </member>
        <member name="F:Walgelijk.Prefab.EntityID">
            <summary>
            The entity
            </summary>
        </member>
        <member name="F:Walgelijk.Prefab.Components">
            <summary>
            Attached components
            </summary>
        </member>
        <member name="M:Walgelijk.Prefab.#ctor(Walgelijk.Entity,System.Object[])">
            <summary>
            Construct a prefab
            </summary>
        </member>
        <member name="M:Walgelijk.Prefab.#ctor(Walgelijk.Entity,Walgelijk.Scene)">
            <summary>
            Construct a prefab from an existing entity
            </summary>
        </member>
        <member name="M:Walgelijk.Prefab.CopyTo(Walgelijk.Scene)">
            <summary>
            Unpack the prefab in the scene. This <b>will ignore the stored <see cref="F:Walgelijk.Prefab.EntityID"/></b> and assign a new ID instead
            </summary>
        </member>
        <member name="M:Walgelijk.Prefab.UnpackTo(Walgelijk.Scene)">
            <summary>
            Unpack the prefab in the scene. This will keep the stored ID and will fail when the ID collides.
            </summary>
        </member>
        <member name="T:Walgelijk.PrefabLoader">
            <summary>
            Entity (de)serialisation utility struct
            </summary>
        </member>
        <member name="M:Walgelijk.PrefabLoader.Load(System.String)">
            <summary>
            Deserialise a JSON representation of <see cref="T:Walgelijk.Prefab"/> from a file
            </summary>
        </member>
        <member name="M:Walgelijk.PrefabLoader.Save(Walgelijk.Prefab,System.String)">
            <summary>
            Serialise a <see cref="T:Walgelijk.Prefab"/> to a file
            </summary>
        </member>
        <member name="T:Walgelijk.RequiresComponents">
            <summary>
            Attribute that lets the <see cref="T:Walgelijk.Scene"/> know that something needs something else.
            </summary>
        </member>
        <member name="M:Walgelijk.RequiresComponents.#ctor(System.Type[])">
            <summary>
            Construct a <see cref="T:Walgelijk.RequiresComponents"/> with the given types
            </summary>
            <param name="componentTypes"></param>
        </member>
        <member name="T:Walgelijk.Scene">
            <summary>
            Stores and manages components and systems
            </summary>
        </member>
        <member name="P:Walgelijk.Scene.Game">
            <summary>
            Game this scene belongs to
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.#ctor(Walgelijk.Game)">
            <summary>
            Create scene for a <see cref="P:Walgelijk.Scene.Game"/> without setting it as the active scene
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.#ctor">
            <summary>
            Create scene without an attached game. This can cause issues when a <see cref="T:Walgelijk.System"/> expects a game
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnCreateEntity">
            <summary>
            Fired when an entity is created and registered
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnAttachComponent">
            <summary>
            Fired when a component is attached to an entity
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnDetachComponent">
            <summary>
            Fired when a component is detacged from an entity
            </summary>
        </member>
        <member name="E:Walgelijk.Scene.OnAddSystem">
            <summary>
            Fired when a system is added
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.AddSystem``1(``0)">
            <summary>
            Add a system
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetSystem``1">
            <summary>
            Retrieve a system
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.RemoveSystem``1">
            <summary>
            Remove system from the list. Getting rid of any references to it is not handled, so the object might remain in memory.
            </summary>
            <returns>if the operation was successful</returns>
        </member>
        <member name="M:Walgelijk.Scene.GetSystems">
            <summary>
            Get all systems
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.CreateEntity">
            <summary>
            Register a new entity to the scene
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.RegisterExistingEntity(Walgelijk.Entity)">
            <summary>
            Register an existing Entity ID to the scene. This should not be used if you are to create a new entity. Use <see cref="M:Walgelijk.Scene.CreateEntity"/> instead. <see cref="E:Walgelijk.Scene.OnCreateEntity"/> will not be invoked.
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetEntity(System.Int32)">
            <summary>
            Get the entity struct from an entity ID. Generally not necessary
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.RemoveEntity(System.Int32)">
            <summary>
            Removes the entity from the list. Also removes all attached components. Any references to the entity will become useless as they will point to nothing. References to any attached components are not handled, so they may remain in memory.
            </summary>
            <param name="identity"></param>
            <returns>if the operation was successful</returns>
        </member>
        <member name="M:Walgelijk.Scene.HasEntity(System.Int32)">
            <summary>
            Get if an entity lives in the scene
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetAllEntities">
            <summary>
            Get all entities
            </summary>
        </member>
        <member name="P:Walgelijk.Scene.EntityCount">
            <summary>
            Amount of entities in the scene
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetAllComponentsFrom(Walgelijk.Entity)">
            <summary>
            Get all components attached to the given entity
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetAllComponentsOfType``1">
            <summary>
            Get all components and entities of a certain type
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.GetComponentFrom``1(Walgelijk.Entity)">
            <summary>
            Retrieve the first component of the specified type on the given entity
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.TryGetEntityWith(System.Object,Walgelijk.Entity@)">
            <summary>
            Get the <see cref="T:Walgelijk.Entity"/> connected to the given component
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.TryGetComponentFrom``1(Walgelijk.Entity,``0@)">
            <summary>
            Retrieve the first component of the specified type on the given entity
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.HasComponent``1(Walgelijk.Entity)">
            <summary>
            Get if an entity has a component
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.AttachComponent``1(Walgelijk.Entity,``0)">
            <summary>
            Attach a component to an entity
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.DetachComponent``1(Walgelijk.Entity)">
            <summary>
            Detach a component from an entity
            </summary>
            <returns>if the operation was successful</returns>
        </member>
        <member name="M:Walgelijk.Scene.UpdateSystems">
            <summary>
            Executes all systems. This is typically handled by the window implementation
            </summary>
        </member>
        <member name="M:Walgelijk.Scene.RenderSystems">
            <summary>
            Renders all systems that implement rendering code. This is typically handled by the window implementation
            </summary>
        </member>
        <member name="T:Walgelijk.System">
            <summary>
            Holds game logic
            </summary>
        </member>
        <member name="P:Walgelijk.System.Scene">
            <summary>
            Containing scene
            </summary>
        </member>
        <member name="P:Walgelijk.System.Input">
            <summary>
            Current input state
            </summary>
        </member>
        <member name="P:Walgelijk.System.Time">
            <summary>
            Current time information
            </summary>
        </member>
        <member name="P:Walgelijk.System.RenderQueue">
            <summary>
            Active render queue
            </summary>
        </member>
        <member name="P:Walgelijk.System.Audio">
            <summary>
            Active audio renderer
            </summary>
        </member>
        <member name="P:Walgelijk.System.ExecutionOrder">
            <summary>
            The order of execution relative to other systems
            </summary>
        </member>
        <member name="P:Walgelijk.System.DevelopmentMode">
            <summary>
            Is the game running in dev mode?
            </summary>
        </member>
        <member name="P:Walgelijk.System.DebugDraw">
            <summary>
            Debug drawing utilities
            </summary>
        </member>
        <member name="P:Walgelijk.System.Profiler">
            <summary>
            The active profiler
            </summary>
        </member>
        <member name="M:Walgelijk.System.Initialise">
            <summary>
            Initialise the system
            </summary>
        </member>
        <member name="M:Walgelijk.System.Update">
            <summary>
            Run the logic
            </summary>
        </member>
        <member name="M:Walgelijk.System.PreRender">
            <summary>
            Run pre rendering code
            </summary>
        </member>
        <member name="M:Walgelijk.System.Render">
            <summary>
            Run rendering code
            </summary>
        </member>
        <member name="M:Walgelijk.System.PostRender">
            <summary>
            Run post rendering code
            </summary>
        </member>
        <member name="T:Walgelijk.AttributeType">
            <summary>
            Possible vertex attribute types
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Integer">
            <summary>
            Integer value
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Float">
            <summary>
            Single precision value
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Double">
            <summary>
            Double precision value
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Vector2">
            <summary>
            Two single precision values
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Vector3">
            <summary>
            Three single precision values
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Vector4">
            <summary>
            Four single precision values
            </summary>
        </member>
        <member name="F:Walgelijk.AttributeType.Matrix4x4">
            <summary>
            Four rows of Vector4
            </summary>
        </member>
        <member name="T:Walgelijk.Color">
            <summary>
            Colour with 4 floating point components ranging from 0-1
            </summary>
        </member>
        <member name="F:Walgelijk.Color.Stride">
            <summary>
            Size of an instance of this struct in bytes
            </summary>
        </member>
        <member name="F:Walgelijk.Color.R">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:Walgelijk.Color.G">
            <summary>
            Green component
            </summary>
        </member>
        <member name="F:Walgelijk.Color.B">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:Walgelijk.Color.A">
            <summary>
            Alpha component
            </summary>
        </member>
        <member name="M:Walgelijk.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a colour using floating point values ranging from 0 to 1 in standard dynamic range
            </summary>
        </member>
        <member name="M:Walgelijk.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a colour using bytes where 0 is 0.0 and 255 is 1.0
            </summary>
        </member>
        <member name="M:Walgelijk.Color.#ctor(System.String)">
            <summary>
            Create a colour based on a hexadecimal representation, such as "#d42c5e"
            </summary>
        </member>
        <member name="P:Walgelijk.Color.Red">
            <summary>
            Bright vermilion
            </summary>
        </member>
        <member name="P:Walgelijk.Color.White">
            <summary>
            White
            </summary>
        </member>
        <member name="P:Walgelijk.Color.Blue">
            <summary>
            Cobalt blue
            </summary>
        </member>
        <member name="P:Walgelijk.Color.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="M:Walgelijk.Color.WithAlpha(System.Single)">
            <summary>
            Return a copy of the colour with the given alpha
            </summary>
        </member>
        <member name="M:Walgelijk.Color.ToBytes">
            <summary>
            Returns a tuple where each element corresponds with a component of the colour
            </summary>
        </member>
        <member name="T:Walgelijk.Colors">
            <summary>
            Collection of predefined, commonly used colours
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Transparent">
            <summary>
            Transparent (0,0,0,0)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Red">
            <summary>
            Red (1,0,0)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Blue">
            <summary>
            Blue (0,0,1)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Green">
            <summary>
            Green (0,1,0)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Magenta">
            <summary>
            Magenta (1,0,1)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Purple">
            <summary>
            Purple
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.GreenYellow">
            <summary>
            Green yellow
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Cyan">
            <summary>
            Cyan (0,1,1)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Sky">
            <summary>
            Sky
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Gray">
            <summary>
            Gray
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Black">
            <summary>
            Black (0,0,0)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.White">
            <summary>
            White (1,1,1)
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.WhiteSmoke">
            <summary>
            White smoke
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:Walgelijk.Colors.Aqua">
            <summary>
            Aqua
            </summary>
        </member>
        <member name="T:Walgelijk.DebugDraw">
            <summary>
            Debug drawing utility class. Usually accessed using <see cref="P:Walgelijk.System.DebugDraw"/> or <see cref="P:Walgelijk.Game.DebugDraw"/>
            </summary>
        </member>
        <member name="M:Walgelijk.DebugDraw.#ctor(Walgelijk.Game)">
            <summary>
            Construct debug draw
            </summary>
            <param name="game"></param>
        </member>
        <member name="M:Walgelijk.DebugDraw.Render">
            <summary>
            Update the debug drawer and remove expired drawings
            </summary>
        </member>
        <member name="M:Walgelijk.DebugDraw.Line(System.Numerics.Vector2,System.Numerics.Vector2,System.Nullable{Walgelijk.Color},System.Nullable{System.Single},Walgelijk.RenderOrder)">
            <summary>
            Draw a line
            </summary>
        </member>
        <member name="M:Walgelijk.DebugDraw.Cross(System.Numerics.Vector2,System.Single,System.Nullable{Walgelijk.Color},System.Nullable{System.Single},Walgelijk.RenderOrder)">
            <summary>
            Draw a cross
            </summary>
        </member>
        <member name="M:Walgelijk.DebugDraw.Circle(System.Numerics.Vector2,System.Single,System.Nullable{Walgelijk.Color},System.Nullable{System.Single},Walgelijk.RenderOrder)">
            <summary>
            Draw a wire circle
            </summary>
        </member>
        <member name="T:Walgelijk.DefaultLayers">
            <summary>
            Structure that holds some common <see cref="T:Walgelijk.RenderOrder"/>s
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultLayers.Zero">
            <summary>
            The default render order. (0, 0)
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultLayers.CameraOperations">
            <summary>
            The render order where camera operations are executed (-10000, 0)
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultLayers.UI">
            <summary>
            The render order where UI is drawn (10000, 0)
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultLayers.DebugUI">
            <summary>
            The render order where debugging UI is drawn (10001, 0)
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultLayers.Bottom">
            <summary>
            The minimum render order (<see cref="F:System.Int32.MinValue"/>, <see cref="F:System.Int32.MinValue"/>)
            </summary>
        </member>
        <member name="F:Walgelijk.DefaultLayers.Top">
            <summary>
            The maximum render order (<see cref="F:System.Int32.MaxValue"/>, <see cref="F:System.Int32.MaxValue"/>)
            </summary>
        </member>
        <member name="T:Walgelijk.FilterMode">
            <summary>
            Filter mode for textures
            </summary>
        </member>
        <member name="F:Walgelijk.FilterMode.Nearest">
            <summary>
            Nearest pixel sampling. Results in pixelated images
            </summary>
        </member>
        <member name="F:Walgelijk.FilterMode.Linear">
            <summary>
            Linear pixel interpolation. Results in somewhat smooth images
            </summary>
        </member>
        <member name="T:Walgelijk.GraphicsExtensions">
            <summary>
            Extension methods for all implementations of <see cref="T:Walgelijk.IGraphics"/>
            </summary>
        </member>
        <member name="M:Walgelijk.GraphicsExtensions.BlitFullscreenQuad(Walgelijk.IGraphics,Walgelijk.RenderTexture,Walgelijk.RenderTexture,Walgelijk.Material,System.String)">
            <summary>
            Blit the <paramref name="src"/> content to <paramref name="dst"/> using a fullscreen quad and the given material
            </summary>
        </member>
        <member name="T:Walgelijk.IGraphics">
            <summary>
            Graphics utility interface meant to be implemented by the rendering implementation
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.Clear(Walgelijk.Color)">
            <summary>
            Clear current target
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.Draw(Walgelijk.VertexBuffer,Walgelijk.Material)">
            <summary>
            Draw a vertex buffer to the currently activated target
            </summary>
            <param name="vertexBuffer">VertexBuffer to draw</param>
            <param name="material">Material to draw it with</param>
        </member>
        <member name="M:Walgelijk.IGraphics.DrawInstanced(Walgelijk.VertexBuffer,System.Int32,Walgelijk.Material)">
            <summary>
            Draw a instanced vertex buffer to the currently activated target
            </summary>
            <param name="vertexBuffer">VertexBuffer to draw</param>
            <param name="instanceCount">Amount of elements to draw</param>
            <param name="material">Material to draw it with</param>
        </member>
        <member name="M:Walgelijk.IGraphics.SetUniform(Walgelijk.Material,System.String,System.Object)">
            <summary>
            Set a shader program uniform
            </summary>
        </member>
        <member name="P:Walgelijk.IGraphics.DrawBounds">
            <summary>
            Drawing bounds settings 
            </summary>
        </member>
        <member name="P:Walgelijk.IGraphics.CurrentTarget">
            <summary>
            Set or get the currently active target
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.Delete(System.Object)">
            <summary>
            Delete an object from the GPU by its CPU representation
            </summary>
        </member>
        <member name="M:Walgelijk.IGraphics.Blit(Walgelijk.RenderTexture,Walgelijk.RenderTexture)">
            <summary>
            Blit a <see cref="T:Walgelijk.RenderTexture"/> onto another
            </summary>
        </member>
        <member name="T:Walgelijk.IReadableTexture">
            <summary>
            A texture that can be written to
            </summary>
        </member>
        <member name="M:Walgelijk.IReadableTexture.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get a pixel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.IReadableTexture.GetPixels">
            <summary>
            Get an immutable array of all pixels
            </summary>
            <returns></returns>
        </member>
        <member name="P:Walgelijk.IReadableTexture.Width">
            <summary>
            Width of the texture in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.Height">
            <summary>
            Height of the texture in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.Size">
            <summary>
            Size of the image. This returns a <see cref="T:System.Numerics.Vector2"/> with <see cref="P:Walgelijk.IReadableTexture.Width"/> and <see cref="P:Walgelijk.IReadableTexture.Height"/>
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.WrapMode">
            <summary>
            Wrap mode
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.FilterMode">
            <summary>
            Filter mode. Determines how pixels are interpolated between
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.HDR">
            <summary>
            Whether the texture can store HDR image data
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.GenerateMipmaps">
            <summary>
            Whether the texture has generated mipmaps upon load
            </summary>
        </member>
        <member name="P:Walgelijk.IReadableTexture.NeedsUpdate">
            <summary>
            Whether or not the renderer needs to send new information to the GPU
            </summary>
        </member>
        <member name="T:Walgelijk.Material">
            <summary>
            Object that holds unique information specific to a shader
            </summary>
        </member>
        <member name="P:Walgelijk.Material.Shader">
            <summary>
            The shader this material uses
            </summary>
        </member>
        <member name="M:Walgelijk.Material.#ctor(Walgelijk.Shader)">
            <summary>
            Create a material with a shader
            </summary>
            <param name="shader"></param>
        </member>
        <member name="M:Walgelijk.Material.#ctor">
            <summary>
            New instance of the default shader
            </summary>
        </member>
        <member name="M:Walgelijk.Material.SetUniform(System.String,System.Object)">
            <summary>
            Set uniform data
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Walgelijk.Material.TryGetUniform``1(System.String,``0@)">
            <summary>
            Try to get the value of a uniform
            </summary>
            <returns>True if the uniform exists</returns>
        </member>
        <member name="M:Walgelijk.Material.HasUniform(System.String)">
            <summary>
            Returns whether a uniform with the given name has been registered in the material
            </summary>
        </member>
        <member name="M:Walgelijk.Material.GetAllUniforms">
            <summary>
            Get all uniforms and their values as an immutable dictionary
            </summary>
        </member>
        <member name="P:Walgelijk.Material.DefaultTextured">
            <summary>
            The default material with the default shader. This material is shared.
            </summary>
        </member>
        <member name="T:Walgelijk.Primitive">
            <summary>
            Way to draw vertices
            </summary>
        </member>
        <member name="T:Walgelijk.PrimitiveMeshes">
            <summary>
            Static class that holds primitive <see cref="T:Walgelijk.VertexBuffer"/> instances. Use these instances instead of creating new ones.
            </summary>
        </member>
        <member name="F:Walgelijk.PrimitiveMeshes.CenteredQuad">
            <summary>
            Unit quad where (0, 0) is the center
            </summary>
        </member>
        <member name="F:Walgelijk.PrimitiveMeshes.Quad">
            <summary>
            Unit quad where (0, 0) is the bottom left
            </summary>
        </member>
        <member name="F:Walgelijk.PrimitiveMeshes.Line">
            <summary>
            A line segment from (0, 0) to (1, 0)
            </summary>
        </member>
        <member name="F:Walgelijk.PrimitiveMeshes.Circle">
            <summary>
            A unit circle primitive with 33 vertices
            </summary>
        </member>
        <member name="M:Walgelijk.PrimitiveMeshes.GenerateCircle(System.Int32,System.Single)">
            <summary>
            Generates a centered circle vertex buffer
            </summary>
        </member>
        <member name="T:Walgelijk.ActionRenderTask">
            <summary>
            Render task that will invoke the action you give. Useful for unique smaller actions
            </summary>
        </member>
        <member name="M:Walgelijk.ActionRenderTask.#ctor(System.Action{Walgelijk.IGraphics})">
            <summary>
            Crate action render task
            </summary>
        </member>
        <member name="F:Walgelijk.ActionRenderTask.Action">
            <summary>
            The action to invoke
            </summary>
        </member>
        <member name="T:Walgelijk.CameraRenderTask">
            <summary>
            Render task that sets the appropriate matrices to match a camera
            </summary>
        </member>
        <member name="F:Walgelijk.CameraRenderTask.View">
            <summary>
            View matrix
            </summary>
        </member>
        <member name="F:Walgelijk.CameraRenderTask.Projection">
            <summary>
            Projection matrix
            </summary>
        </member>
        <member name="T:Walgelijk.ClearRenderTask">
            <summary>
            Task that clears the target
            </summary>
        </member>
        <member name="P:Walgelijk.ClearRenderTask.ClearColor">
            <summary>
            The colour to clear the target with
            </summary>
        </member>
        <member name="T:Walgelijk.DrawBoundsTask">
            <summary>
            Render task that will set the drawing bounds settings
            </summary>
        </member>
        <member name="F:Walgelijk.DrawBoundsTask.DrawBounds">
            <summary>
            Draw bounds settings to set
            </summary>
        </member>
        <member name="M:Walgelijk.DrawBoundsTask.#ctor(Walgelijk.DrawBounds)">
            <summary>
            Create an instance with the given draw bounds settings
            </summary>
            <param name="drawBounds"></param>
        </member>
        <member name="F:Walgelijk.DrawBoundsTask.DisableDrawBoundsTask">
            <summary>
            Task that disabled the drawbounds. This instance is <b>shared</b> and should not be changed.
            </summary>
        </member>
        <member name="T:Walgelijk.GroupRenderTask">
            <summary>
            An ordered group of render tasks that should always be executed together
            </summary>
        </member>
        <member name="F:Walgelijk.GroupRenderTask.Tasks">
            <summary>
            The group of render tasks
            </summary>
        </member>
        <member name="T:Walgelijk.InstancedShapeRenderTask">
            <summary>
            Render task that renders an instanced vertex buffer with a material
            </summary>
        </member>
        <member name="M:Walgelijk.InstancedShapeRenderTask.#ctor(Walgelijk.VertexBuffer,System.Numerics.Matrix4x4,Walgelijk.Material)">
            <summary>
            Create a shape render task
            </summary>
        </member>
        <member name="F:Walgelijk.InstancedShapeRenderTask.InstanceCount">
            <summary>
            Amount of instances 
            </summary>
        </member>
        <member name="T:Walgelijk.IRenderTask">
            <summary>
            A task that can be queued in the render queue
            </summary>
        </member>
        <member name="M:Walgelijk.IRenderTask.Execute(Walgelijk.IGraphics)">
            <summary>
            Execute the render task on the given render target
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:Walgelijk.ShapeRenderTask">
            <summary>
            Render task that renders a vertex buffer with a material
            </summary>
        </member>
        <member name="M:Walgelijk.ShapeRenderTask.#ctor(Walgelijk.VertexBuffer,System.Numerics.Matrix4x4,Walgelijk.Material)">
            <summary>
            Create a shape render task
            </summary>
        </member>
        <member name="F:Walgelijk.ShapeRenderTask.ModelMatrix">
            <summary>
            The matrix to transform the vertices with
            </summary>
        </member>
        <member name="F:Walgelijk.ShapeRenderTask.VertexBuffer">
            <summary>
            Vertex buffer to draw
            </summary>
        </member>
        <member name="F:Walgelijk.ShapeRenderTask.Material">
            <summary>
            Material to draw with
            </summary>
        </member>
        <member name="F:Walgelijk.ShapeRenderTask.ScreenSpace">
            <summary>
            Should the task set the view matrix to <see cref="P:System.Numerics.Matrix4x4.Identity"/> 
            </summary>
        </member>
        <member name="T:Walgelijk.TargetRenderTask">
            <summary>
            Task that sets the active render target
            </summary>
        </member>
        <member name="P:Walgelijk.TargetRenderTask.Target">
            <summary>
            The target to set
            </summary>
        </member>
        <member name="T:Walgelijk.RenderOrder">
            <summary>
            Simple stucture that holds data for the layer system
            </summary>
        </member>
        <member name="F:Walgelijk.RenderOrder.Layer">
            <summary>
            The main layer to draw on
            </summary>
        </member>
        <member name="F:Walgelijk.RenderOrder.OrderInLayer">
            <summary>
            The order within <see cref="F:Walgelijk.RenderOrder.Layer"/> to draw on
            </summary>
        </member>
        <member name="M:Walgelijk.RenderOrder.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a rendering order structure
            </summary>
        </member>
        <member name="M:Walgelijk.RenderOrder.WithOrder(System.Int32)">
            <summary>
            Return a <see cref="T:Walgelijk.RenderOrder"/> on the same layer, but with the given order
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.RenderQueue">
            <summary>
            This object manages a render queue of <see cref="T:Walgelijk.IRenderTask"/>
            </summary>
        </member>
        <member name="M:Walgelijk.RenderQueue.RenderAndReset(Walgelijk.IGraphics)">
            <summary>
            Render the queue by dequeuing and executing each entry
            </summary>
        </member>
        <member name="M:Walgelijk.RenderQueue.Add(Walgelijk.IRenderTask,Walgelijk.RenderOrder)">
            <summary>
            Add a task to the queue. The optional order determines when it's going to be executed. Higher values mean later execution.
            </summary>
        </member>
        <member name="P:Walgelijk.RenderQueue.Length">
            <summary>
            Length of the queue
            </summary>
        </member>
        <member name="T:Walgelijk.RenderTarget">
            <summary>
            A target that can be rendered to
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.ViewMatrix">
            <summary>
            The view matrix
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.ProjectionMatrix">
            <summary>
            The projection matrix
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.ModelMatrix">
            <summary>
            The model matrix
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.Size">
            <summary>
            Size of the target.
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.AspectRatio">
            <summary>
            Calculate the aspect ratio from the current render target size. Identical to Size.Y / Size.X
            </summary>
        </member>
        <member name="P:Walgelijk.RenderTarget.OrthographicMatrix">
            <summary>
            An orthographic projection matrix matrix where the top left is 0,0 and the bottom right is <see cref="P:Walgelijk.RenderTarget.Size"/>
            </summary>
        </member>
        <member name="T:Walgelijk.RenderTexture">
            <summary>
            A render target of an arbitrary size that can be used as a texture
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTexture.#ctor(System.Int32,System.Int32,Walgelijk.WrapMode,Walgelijk.FilterMode,System.Boolean,System.Boolean)">
            <summary>
            Construct a <see cref="T:Walgelijk.RenderTexture"/>
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTexture.ForceUpdate">
            <summary>
            Force an update
            </summary>
        </member>
        <member name="M:Walgelijk.RenderTexture.Dispose">
            <summary>
            Delete the texture and framebuffer from the GPU
            </summary>
        </member>
        <member name="T:Walgelijk.Shader">
            <summary>
            Structure that holds the code for a full shader program
            </summary>
        </member>
        <member name="M:Walgelijk.Shader.#ctor(System.String,System.String)">
            <summary>
            Create a shader from vertex and fragment shader code
            </summary>
            <param name="vertexShader"></param>
            <param name="fragmentShader"></param>
        </member>
        <member name="P:Walgelijk.Shader.VertexShader">
            <summary>
            The vertex shader of the program
            </summary>
        </member>
        <member name="P:Walgelijk.Shader.FragmentShader">
            <summary>
            The fragment shader of the program
            </summary>
        </member>
        <member name="M:Walgelijk.Shader.Load(System.String,System.String)">
            <summary>
            Load shader from files
            </summary>
            <param name="vertPath"></param>
            <param name="fragPath"></param>
            <returns></returns>
        </member>
        <member name="P:Walgelijk.Shader.Default">
            <summary>
            Default shader. Renders vertex colours and textures.
            </summary>
        </member>
        <member name="T:Walgelijk.ShaderDefaults">
            <summary>
            Useful values for shader related business 
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderDefaults.TexturedFragment">
            <summary>
            Default fragment shader code
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderDefaults.WorldSpaceVertex">
            <summary>
            Default vertex shader code
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderDefaults.ProjectionMatrixUniform">
            <summary>
            Projection matrix uniform name
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderDefaults.ViewMatrixUniform">
            <summary>
            View matrix uniform name
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderDefaults.ModelMatrixUniform">
            <summary>
            Model matrix uniform name
            </summary>
        </member>
        <member name="F:Walgelijk.ShaderDefaults.MainTextureUniform">
            <summary>
            Main texture uniform name
            </summary>
        </member>
        <member name="T:Walgelijk.Texture">
            <summary>
            Represents a texture
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.Width">
            <summary>
            Width of the texture in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.Height">
            <summary>
            Height of the texture in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.Size">
            <summary>
            Size of the image. This returns a <see cref="T:System.Numerics.Vector2"/> with <see cref="P:Walgelijk.Texture.Width"/> and <see cref="P:Walgelijk.Texture.Height"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.WrapMode">
            <summary>
            Wrap mode
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.FilterMode">
            <summary>
            Filter mode. Determines how pixels are interpolated between
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.GenerateMipmaps">
            <summary>
            Whether the texture has generated mipmaps upon load
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.HDR">
            <summary>
            Whether the texture can store HDR image data
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.NeedsUpdate">
            <summary>
            Whether or not the renderer needs to send new information to the GPU
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.#ctor(System.Int32,System.Int32,Walgelijk.Color[],System.Boolean)">
            <summary>
            Create a texture from a series of pixels
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create an empty texture
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.Load(System.String,System.Boolean,System.Boolean)">
            <summary>
            Load an image from a path
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.GetPixels">
            <summary>
            Get an immutable array of all pixels
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Texture.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get a pixel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Texture.SetPixel(System.Int32,System.Int32,Walgelijk.Color)">
            <summary>
            Set a pixel to a colour
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.ForceUpdate">
            <summary>
            Force an update
            </summary>
        </member>
        <member name="M:Walgelijk.Texture.Dispose">
            <summary>
            Delete the texture from the GPU
            </summary>
        </member>
        <member name="P:Walgelijk.Texture.White">
            <summary>
            1x1 texture with a single white pixel
            </summary>
        </member>
        <member name="T:Walgelijk.TransformationStack">
            <summary>
            Basically just a stack of 4x4 matrices
            </summary>
        </member>
        <member name="M:Walgelijk.TransformationStack.Pop">
            <summary>
            Pop a matrix off the stack
            </summary>
        </member>
        <member name="M:Walgelijk.TransformationStack.Push(System.Numerics.Matrix4x4)">
            <summary>
            Push a matrix on the stack
            </summary>
        </member>
        <member name="M:Walgelijk.TransformationStack.GetMatrices">
            <summary>
            Get an immutable array of all matrices in the stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.TransformationStack.GetMatrices(System.Numerics.Matrix4x4[])">
            <summary>
            Copies all matrices in the stack into the given buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.TransformationStack.GetFinalMatrix">
            <summary>
            Get the final matrix. The result is cached.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Walgelijk.Vertex">
            <summary>
            A vertex
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.Stride">
            <summary>
            Size of an instance of this struct in bytes
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.Position">
            <summary>
            Vertex position
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.TexCoords">
            <summary>
            Vertex UV coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.Vertex.Color">
            <summary>
            Vertex colour
            </summary>
        </member>
        <member name="M:Walgelijk.Vertex.#ctor(System.Numerics.Vector3,System.Numerics.Vector2,Walgelijk.Color)">
            <summary>
            Create a vertex with a position, UV, and colour
            </summary>
            <param name="position"></param>
            <param name="texCoords"></param>
            <param name="color"></param>
        </member>
        <member name="M:Walgelijk.Vertex.#ctor(System.Numerics.Vector3)">
            <summary>
            Create a vertex with a position. White and zero UV by default;
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Walgelijk.Vertex.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a vertex with a position.  White and zero UV by default;
            </summary>
        </member>
        <member name="T:Walgelijk.VertexAttributeArray">
            <summary>
            Struct that holds an array and its vertex attribute type as an enum
            </summary>
        </member>
        <member name="P:Walgelijk.VertexAttributeArray.AttributeType">
            <summary>
            Type of data
            </summary>
        </member>
        <member name="M:Walgelijk.VertexAttributeArray.GetAt(System.Int32)">
            <summary>
            Get value at an index
            </summary>
        </member>
        <member name="M:Walgelijk.VertexAttributeArray.SetAt(System.Int32,System.Object)">
            <summary>
            Get value at an index
            </summary>
        </member>
        <member name="P:Walgelijk.VertexAttributeArray.Count">
            <summary>
            Amount of elements
            </summary>
        </member>
        <member name="F:Walgelijk.VertexAttributeArray.Data">
            <summary>
            Raw object data
            </summary>
        </member>
        <member name="T:Walgelijk.FloatAttributeArray">
            <summary>
            Float vertex attribute array
            </summary>
        </member>
        <member name="T:Walgelijk.IntAttributeArray">
            <summary>
            Float vertex attribute array
            </summary>
        </member>
        <member name="T:Walgelijk.Vector2AttributeArray">
            <summary>
            Vector2 vertex attribute array
            </summary>
        </member>
        <member name="T:Walgelijk.Vector3AttributeArray">
            <summary>
            Vector3 vertex attribute array
            </summary>
        </member>
        <member name="T:Walgelijk.Vector4AttributeArray">
            <summary>
            Vector4 vertex attribute array
            </summary>
        </member>
        <member name="T:Walgelijk.Matrix4x4AttributeArray">
            <summary>
            Matrix4x4 vertex attribute array
            </summary>
        </member>
        <member name="T:Walgelijk.VertexBuffer">
            <summary>
            Holds all the data needed to draw vertices to the screen
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.PrimitiveType">
            <summary>
            The way vertices are drawn
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer.#ctor(Walgelijk.Vertex[],System.UInt32[],Walgelijk.VertexAttributeArray[])">
            <summary>
            Create a VertexBuffer with the specified vertices and indices
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer.#ctor(Walgelijk.Vertex[])">
            <summary>
            Create a VertexBuffer with the specified vertices. The indices will be set automatically
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer.#ctor">
            <summary>
            Create an empty vertex buffer
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.HasChanged">
            <summary>
            Whether the data needs to be uploaded to the GPU again
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.ExtraDataHasChanged">
            <summary>
            Whether the extra data needs to be uploaded to the GPU again
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.Vertices">
            <summary>
            Vertices to draw. <b>Do not forget to set the corresponding indices, or use <see cref="M:Walgelijk.VertexBuffer.GenerateIndices"/></b>
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.Indices">
            <summary>
            Indices to draw vertices by
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.IndexCount">
            <summary>
            Amount of indices
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.VertexCount">
            <summary>
            Amount of vertices
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer.ForceUpdate">
            <summary>
            Force the data to be reuploaded to the GPU
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer.GenerateIndices">
            <summary>
            Generates indices that simply walk the vertex array from beginning to end
            </summary>
        </member>
        <member name="M:Walgelijk.VertexBuffer.GetAttribute(System.Int32)">
            <summary>
            Get a vertex attribute array. Returns null if nothing is found. This is a reference value.
            </summary>
        </member>
        <member name="P:Walgelijk.VertexBuffer.ExtraAttributeCount">
            <summary>
            Returns the amount of extra attributes. The total amount of attributes equals this value + 3
            </summary>
        </member>
        <member name="T:Walgelijk.WrapMode">
            <summary>
            Wrap mode for textures
            </summary>
        </member>
        <member name="F:Walgelijk.WrapMode.Clamp">
            <summary>
            Extends the edge pixels
            </summary>
        </member>
        <member name="F:Walgelijk.WrapMode.Repeat">
            <summary>
            Repeats the UV
            </summary>
        </member>
        <member name="F:Walgelijk.WrapMode.Mirror">
            <summary>
            Mirrors the UV
            </summary>
        </member>
        <member name="T:Walgelijk.Range`1">
            <summary>
            Object with a minimum and maximum value
            </summary>
        </member>
        <member name="P:Walgelijk.Range`1.Min">
            <summary>
            Minimum bound
            </summary>
        </member>
        <member name="P:Walgelijk.Range`1.Max">
            <summary>
            Maximum bound
            </summary>
        </member>
        <member name="M:Walgelijk.Range`1.#ctor(`0,`0)">
            <summary>
            Construct a <see cref="T:Walgelijk.Range`1"/> with the given range values
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Walgelijk.Range`1.#ctor(`0)">
            <summary>
            Construct a <see cref="T:Walgelijk.Range`1"/> where both bounds are identical
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Walgelijk.Range`1.GetRandom">
            <summary>
            Get a random number between <see cref="P:Walgelijk.Range`1.Min"/> and <see cref="P:Walgelijk.Range`1.Max"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Range`1.IsInRange(`0)">
            <summary>
            Returns true if a value is within the range, and false otherwise
            </summary>
        </member>
        <member name="M:Walgelijk.Range`1.Clamp(`0)">
            <summary>
            Clamps the given value within the range
            </summary>
        </member>
        <member name="T:Walgelijk.FloatRange">
            <summary>
            Struct with a minimum and maximum float value
            </summary>
        </member>
        <member name="M:Walgelijk.FloatRange.#ctor(System.Single,System.Single)">
            <summary>
            Construct a float range
            </summary>
        </member>
        <member name="M:Walgelijk.FloatRange.#ctor(System.Single)">
            <summary>
            Construct a float range
            </summary>
        </member>
        <member name="T:Walgelijk.IntRange">
            <summary>
            Struct with a minimum and maximum integer value
            </summary>
        </member>
        <member name="M:Walgelijk.IntRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct an integer range
            </summary>
        </member>
        <member name="M:Walgelijk.IntRange.#ctor(System.Int32)">
            <summary>
            Construct an integer range
            </summary>
        </member>
        <member name="T:Walgelijk.Vec2Range">
            <summary>
            Struct with a minimum and maximum <see cref="T:System.Numerics.Vector2"/> value
            </summary>
        </member>
        <member name="M:Walgelijk.Vec2Range.#ctor(System.Numerics.Vector2,System.Numerics.Vector2)">
            <summary>
            Construct a <see cref="T:System.Numerics.Vector2"/> range
            </summary>
        </member>
        <member name="M:Walgelijk.Vec2Range.#ctor(System.Numerics.Vector2)">
            <summary>
            Construct a <see cref="T:System.Numerics.Vector2"/>  range
            </summary>
        </member>
        <member name="T:Walgelijk.ColorRange">
            <summary>
            Struct with a minimum and maximum <see cref="T:Walgelijk.Color"/> value
            </summary>
        </member>
        <member name="M:Walgelijk.ColorRange.#ctor(Walgelijk.Color,Walgelijk.Color)">
            <summary>
            Construct a <see cref="T:System.Numerics.Vector2"/> range
            </summary>
        </member>
        <member name="M:Walgelijk.ColorRange.#ctor(Walgelijk.Color)">
            <summary>
            Construct a <see cref="T:System.Numerics.Vector2"/>  range
            </summary>
        </member>
        <member name="T:Walgelijk.Rect">
            <summary>
            Simple rectangle structure
            </summary>
        </member>
        <member name="F:Walgelijk.Rect.MinX">
            <summary>
            Minimum X point
            </summary>
        </member>
        <member name="F:Walgelijk.Rect.MinY">
            <summary>
            Minimum Y point
            </summary>
        </member>
        <member name="F:Walgelijk.Rect.MaxX">
            <summary>
            Maximum X point
            </summary>
        </member>
        <member name="F:Walgelijk.Rect.MaxY">
            <summary>
            Maximum Y point
            </summary>
        </member>
        <member name="P:Walgelijk.Rect.Width">
            <summary>
            Width of rectangle
            </summary>
        </member>
        <member name="P:Walgelijk.Rect.Height">
            <summary>
            Height of rectangle
            </summary>
        </member>
        <member name="M:Walgelijk.Rect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create a rectangle
            </summary>
        </member>
        <member name="T:Walgelijk.CommandAttribute">
            <summary>
            Attribute that registers a command to the command processor registry
            </summary>
        </member>
        <member name="T:Walgelijk.CommandProcessor">
            <summary>
            Object responsible for command processing. Only has static methods.
            </summary>
        </member>
        <member name="M:Walgelijk.CommandProcessor.Execute(System.String,Walgelijk.DebugConsole)">
            <summary>
            Execute the given string as a command
            </summary>
        </member>
        <member name="M:Walgelijk.CommandProcessor.GetAllCommands">
            <summary>
            Get all commands
            </summary>
        </member>
        <member name="T:Walgelijk.CommandResult">
            <summary>
            A struct you can return that the command processor will interpret
            </summary>
        </member>
        <member name="F:Walgelijk.CommandResult.Message">
            <summary>
            Message to return
            </summary>
        </member>
        <member name="F:Walgelijk.CommandResult.Type">
            <summary>
            Message type
            </summary>
        </member>
        <member name="M:Walgelijk.CommandResult.Info(System.String)">
            <summary>
            Create a <see cref="T:Walgelijk.CommandResult"/> of type Info
            </summary>
        </member>
        <member name="M:Walgelijk.CommandResult.Warn(System.String)">
            <summary>
            Create a <see cref="T:Walgelijk.CommandResult"/> of type Warn
            </summary>
        </member>
        <member name="M:Walgelijk.CommandResult.Error(System.String)">
            <summary>
            Create a <see cref="T:Walgelijk.CommandResult"/> of type Error
            </summary>
        </member>
        <member name="M:Walgelijk.CommandResult.op_Implicit(System.String)~Walgelijk.CommandResult">
            <summary>
            Implicit string conversion
            </summary>
        </member>
        <member name="T:Walgelijk.DebugConsole">
            <summary>
            Class that renders and controls the debug console
            </summary>
        </member>
        <member name="F:Walgelijk.DebugConsole.ToggleKey">
            <summary>
            The key that will toggle the console
            </summary>
        </member>
        <member name="P:Walgelijk.DebugConsole.IsActive">
            <summary>
            Whether the console is shown and active or not
            </summary>
        </member>
        <member name="P:Walgelijk.DebugConsole.Game">
            <summary>
            The <see cref="P:Walgelijk.DebugConsole.Game"/> this console is associated with
            </summary>
        </member>
        <member name="P:Walgelijk.DebugConsole.IsEatingInput">
            <summary>
            Whether the console is currently eating user input
            </summary>
        </member>
        <member name="P:Walgelijk.DebugConsole.DrawConsoleNotification">
            <summary>
            Briefly draw the most recent console message to the screen even if the console is not open.
            </summary>
        </member>
        <member name="M:Walgelijk.DebugConsole.Print(System.String)">
            <summary>
            Print text to the console
            </summary>
        </member>
        <member name="M:Walgelijk.DebugConsole.Clear">
            <summary>
            Clear the console
            </summary>
        </member>
        <member name="T:Walgelijk.ConsoleLogger">
            <summary>
            The default logger. Logs to the console.
            </summary>
        </member>
        <member name="T:Walgelijk.ILogger">
            <summary>
            Interface for basic logging
            </summary>
        </member>
        <member name="M:Walgelijk.ILogger.Log(System.Object,System.Object)">
            <summary>
            Log information
            </summary>
        </member>
        <member name="M:Walgelijk.ILogger.Warn(System.Object,System.Object)">
            <summary>
            Log a warning
            </summary>
        </member>
        <member name="M:Walgelijk.ILogger.Error(System.Object,System.Object)">
            <summary>
            Log an error
            </summary>
        </member>
        <member name="T:Walgelijk.Logger">
            <summary>
            Access the logging implementation
            </summary>
        </member>
        <member name="P:Walgelijk.Logger.Implementation">
            <summary>
            The logging implementation used. Set to <see cref="T:Walgelijk.ConsoleLogger"/> by default
            </summary>
        </member>
        <member name="M:Walgelijk.Logger.Log(System.Object,System.Object)">
            <summary>
            Log information
            </summary>
        </member>
        <member name="M:Walgelijk.Logger.Warn(System.Object,System.Object)">
            <summary>
            Log a warning
            </summary>
        </member>
        <member name="M:Walgelijk.Logger.Error(System.Object,System.Object)">
            <summary>
            Log an error
            </summary>
        </member>
        <member name="F:Walgelijk.Logger.OnLog">
            <summary>
            Event dispatched when a message is logged at any level
            </summary>
        </member>
        <member name="T:Walgelijk.LogLevel">
            <summary>
            Levels of logging
            </summary>
        </member>
        <member name="F:Walgelijk.LogLevel.Info">
            <summary>
            Informational messages
            </summary>
        </member>
        <member name="F:Walgelijk.LogLevel.Warn">
            <summary>
            Warning messages
            </summary>
        </member>
        <member name="F:Walgelijk.LogLevel.Error">
            <summary>
            Error messages
            </summary>
        </member>
        <member name="T:Walgelijk.LogMessage">
            <summary>
            Struct that contains all information associated with a logged message
            </summary>
        </member>
        <member name="F:Walgelijk.LogMessage.Message">
            <summary>
            Object sent by the source.
            </summary>
        </member>
        <member name="F:Walgelijk.LogMessage.Source">
            <summary>
            Object that sent the message. Can be null.
            </summary>
        </member>
        <member name="F:Walgelijk.LogMessage.Level">
            <summary>
            Level of this message
            </summary>
        </member>
        <member name="T:Walgelijk.Profiler">
            <summary>
            Provides performance information
            </summary>
        </member>
        <member name="P:Walgelijk.Profiler.UpdatesPerSecond">
            <summary>
            Amount of updates in the last second
            </summary>
        </member>
        <member name="P:Walgelijk.Profiler.FramesPerSecond">
            <summary>
            Amount of frames rendered in the last second
            </summary>
        </member>
        <member name="P:Walgelijk.Profiler.DrawQuickProfiler">
            <summary>
            Enables or disables a small debug performance information display
            </summary>
        </member>
        <member name="M:Walgelijk.Profiler.#ctor(Walgelijk.Game)">
            <summary>
            Create a profiler for the given game
            </summary>
            <param name="game"></param>
        </member>
        <member name="M:Walgelijk.Profiler.Update">
            <summary>
            Force the profiler to update. Should be handled by the window.
            </summary>
        </member>
        <member name="M:Walgelijk.Profiler.Render">
            <summary>
            Force the profiler to calculate render information. Should be handled by the window.
            </summary>
        </member>
        <member name="M:Walgelijk.Profiler.StartTask(System.String)">
            <summary>
            Start a profiled task with a name
            </summary>
        </member>
        <member name="M:Walgelijk.Profiler.EndTask">
            <summary>
            End the ongoing profiled task
            </summary>
            <returns>The amount of time that has passed</returns>
        </member>
        <member name="M:Walgelijk.Profiler.GetProfiledTasks">
            <summary>
            Get all profiled tasks for this frame
            </summary>
        </member>
        <member name="T:Walgelijk.ProfiledTask">
            <summary>
            Structure that holds a task name and relevant time data
            </summary>
        </member>
        <member name="F:Walgelijk.ProfiledTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Walgelijk.ProfiledTask.Duration">
            <summary>
            How long the task took
            </summary>
        </member>
        <member name="T:Walgelijk.FixedIntervalDistributor">
            <summary>
            Class that calculates the amount of times something needs to execute to adhere to a specific rate
            </summary>
        </member>
        <member name="P:Walgelijk.FixedIntervalDistributor.Rate">
            <summary>
            Preferred cycles rate
            </summary>
        </member>
        <member name="P:Walgelijk.FixedIntervalDistributor.MaxRate">
            <summary>
            Maximum ouput cycles rate that
            </summary>
        </member>
        <member name="P:Walgelijk.FixedIntervalDistributor.Interval">
            <summary>
            1.0f / <see cref="P:Walgelijk.FixedIntervalDistributor.Rate"/>
            </summary>
        </member>
        <member name="M:Walgelijk.FixedIntervalDistributor.CalculateCycleCount(System.Single)">
            <summary>
            Calculate the amount of cycles to execute
            </summary>
        </member>
        <member name="T:Walgelijk.Game">
            <summary>
            The link between the scene and the window
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Main">
            <summary>
            The last instance that was created
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Console">
            <summary>
            The developer console
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Window">
            <summary>
            Currently active window
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Scene">
            <summary>
            Currently active scene
            </summary>
        </member>
        <member name="P:Walgelijk.Game.RenderQueue">
            <summary>
            Returns the <see cref="T:Walgelijk.RenderQueue"/> that belongs to <see cref="P:Walgelijk.Game.Window"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Game.AudioRenderer">
            <summary>
            The main audio renderer
            </summary>
        </member>
        <member name="P:Walgelijk.Game.DebugDraw">
            <summary>
            Debug drawing utilities
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Profiling">
            <summary>
            The game profiler
            </summary>
        </member>
        <member name="P:Walgelijk.Game.Time">
            <summary>
            Returns the <see cref="T:Walgelijk.Time"/> information that belongs to <see cref="P:Walgelijk.Game.Window"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Game.DevelopmentMode">
            <summary>
            When set to true, safety checks will be done at runtime. This will degrade performance and should be turned off in release. <b>True by default</b>
            </summary>
        </member>
        <member name="M:Walgelijk.Game.#ctor(Walgelijk.Window,Walgelijk.AudioRenderer)">
            <summary>
            Create a game with a window and an optional audio renderer. If the audio renderer is not set, the game won't be able to play any sounds
            </summary>
        </member>
        <member name="M:Walgelijk.Game.Start">
            <summary>
            Start the game loop
            </summary>
        </member>
        <member name="M:Walgelijk.Game.Stop">
            <summary>
            Exit the game
            </summary>
        </member>
        <member name="T:Walgelijk.Hook`1">
            <summary>
            Event that can be dispatched and listened to
            </summary>
        </member>
        <member name="M:Walgelijk.Hook`1.Dispatch(`0)">
            <summary>
            Dispatch the event to all listeners
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Walgelijk.Hook`1.AddListener(System.Action{`0})">
            <summary>
            Adds the given action to the listeners list
            </summary>
        </member>
        <member name="M:Walgelijk.Hook`1.RemoveListener(System.Action{`0})">
            <summary>
            Remove the given action from the listeners list
            </summary>
        </member>
        <member name="M:Walgelijk.Hook`1.HasListener(System.Action{`0})">
            <summary>
            Returns if the given action will be invoked when the event is dispatched
            </summary>
        </member>
        <member name="M:Walgelijk.Hook`1.ClearListeners">
            <summary>
            Clear all listeners
            </summary>
        </member>
        <member name="P:Walgelijk.Hook`1.ListenerCount">
            <summary>
            Amount of listeners
            </summary>
        </member>
        <member name="T:Walgelijk.Resources">
            <summary>
            Global path based resource storage
            </summary>
        </member>
        <member name="E:Walgelijk.Resources.OnStartLoad">
            <summary>
            Event invoked when a resource has been requested
            </summary>
        </member>
        <member name="P:Walgelijk.Resources.BasePath">
            <summary>
            Base path of all resource requests
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.Initialise">
            <summary>
            Initialise 
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.Load``1(System.String,System.Boolean)">
            <summary>
            Load the resource at the given path. Will throw an exception if there is no resource loader found for the type, or if the file at the path is not of the given type.
            </summary>
            <typeparam name="T">The type of the object to load</typeparam>
            <param name="path">The path of the file</param>
            <param name="ignoreBasePaths">Whether or not to ignore any set base paths. Default is false</param>
        </member>
        <member name="M:Walgelijk.Resources.SetBasePathForType(System.Type,System.String)">
            <summary>
            Sets the base path for a specific type. This will be combined with the <see cref="P:Walgelijk.Resources.BasePath"/> and the input path to create the full path
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.SetBasePathForType``1(System.String)">
            <summary>
            Sets the base path for a specific type. This will be combined with the <see cref="P:Walgelijk.Resources.BasePath"/> and the input path to create the full path. This method is the generic version of <see cref="M:Walgelijk.Resources.SetBasePathForType(System.Type,System.String)"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.CanLoad(System.Type)">
            <summary>
            Returns if the resource manager can load objects of the given type
            </summary>
        </member>
        <member name="M:Walgelijk.Resources.RegisterType(System.Type,System.Func{System.String,System.Object})">
            <summary>
            Register a resource type with its loader
            </summary>
            <param name="type">Type of the resource</param>
            <param name="loadFunction">The function that returns the object given a path</param>
            <returns>Whether the registration succeeded</returns>
        </member>
        <member name="T:Walgelijk.Time">
            <summary>
            Structure that holds frame specific time data
            </summary>
        </member>
        <member name="P:Walgelijk.Time.UpdateDeltaTime">
            <summary>
            Returns the amount of seconds that have passed since the last update frame
            </summary>
        </member>
        <member name="P:Walgelijk.Time.RenderDeltaTime">
            <summary>
            Returns the amount of seconds that have passed since the last rendered frame
            </summary>
        </member>
        <member name="P:Walgelijk.Time.SecondsSinceLoad">
            <summary>
            Returns the amount of seconds that have passed since the game was launched
            </summary>
        </member>
        <member name="P:Walgelijk.Time.TimeScale">
            <summary>
            Factor by which the time is multiplied
            </summary>
        </member>
        <member name="T:Walgelijk.Font">
            <summary>
            Object that holds font information and pages
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Name">
            <summary>
            Display name of the font
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Size">
            <summary>
            Retrieve the point size this font was loaded with
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Bold">
            <summary>
            Retrieve if the font was loaded with the bold style
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Smooth">
            <summary>
            Retrieve if the font was loaded with the smooth flag. The flag determined the <see cref="T:Walgelijk.FilterMode"/> the pages were loaded with.
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Italic">
            <summary>
            Retrieve if the font was loaded with the italic style
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Width">
            <summary>
            Page width in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Height">
            <summary>
            Page height in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Font.LineHeight">
            <summary>
            Line height in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Pages">
            <summary>
            Array of texture pages this font uses
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Glyphs">
            <summary>
            Glyphs by character
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Kernings">
            <summary>
            Kernings by <see cref="T:Walgelijk.KerningPair"/>
            </summary>
        </member>
        <member name="P:Walgelijk.Font.Material">
            <summary>
            Material this font uses. Be aware this may be shared across text. Use <see cref="M:Walgelijk.TextMaterial.CreateFor(Walgelijk.Font)"/> to create a new material.
            </summary>
        </member>
        <member name="M:Walgelijk.Font.Load(System.String)">
            <summary>
            Load a font from a metadata file (BMFont .fnt)
            </summary>
        </member>
        <member name="M:Walgelijk.Font.GetGlyph(System.Char,Walgelijk.Glyph)">
            <summary>
            Get the glyph for a character. 
            </summary>
        </member>
        <member name="M:Walgelijk.Font.GetKerning(System.Char,System.Char)">
            <summary>
            Get kerning for two characters
            </summary>
        </member>
        <member name="F:Walgelijk.Font.Default">
            <summary>
            The default font
            </summary>
        </member>
        <member name="T:Walgelijk.KerningPair">
            <summary>
            The two characters a kerning amount applies to
            </summary>
        </member>
        <member name="F:Walgelijk.KerningPair.PreviousChar">
            <summary>
            Previous character in the sequence
            </summary>
        </member>
        <member name="F:Walgelijk.KerningPair.CurrentChar">
            <summary>
            Current character in the sequence
            </summary>
        </member>
        <member name="T:Walgelijk.Glyph">
            <summary>
            Structure with font glyph information
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.Identity">
            <summary>
            Character this glyph belongs to
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.X">
            <summary>
            X position on the page in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.Y">
            <summary>
            Y position on the page in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.Width">
            <summary>
            Width of the page in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.Height">
            <summary>
            Height of the page in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.XOffset">
            <summary>
            Horizontal offset of this character in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.YOffset">
            <summary>
            Vertical offset of this character in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.Advance">
            <summary>
            How many pixels to advance the cursor after this glyph
            </summary>
        </member>
        <member name="F:Walgelijk.Glyph.Page">
            <summary>
            Page index of the glyph
            </summary>
        </member>
        <member name="T:Walgelijk.Kerning">
            <summary>
            Structure with kerning information
            </summary>
        </member>
        <member name="F:Walgelijk.Kerning.FirstChar">
            <summary>
            Preceding character
            </summary>
        </member>
        <member name="F:Walgelijk.Kerning.SecondChar">
            <summary>
            Current character
            </summary>
        </member>
        <member name="F:Walgelijk.Kerning.Amount">
            <summary>
            Offset amount
            </summary>
        </member>
        <member name="T:Walgelijk.TextComponent">
            <summary>
            IShapeComponent that holds the information necessary to draw text
            </summary>
        </member>
        <member name="M:Walgelijk.TextComponent.#ctor(System.String,Walgelijk.Font)">
            <summary>
            Create a text component
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.String">
            <summary>
            Displayed string. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.Font">
            <summary>
            Used font. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.Color">
            <summary>
            Text colour. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.LocalBoundingBox">
            <summary>
            The bounding box of the text in local coordinates
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.TrackingMultiplier">
            <summary>
            Distance between letters. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.KerningMultiplier">
            <summary>
            Kerning amount multiplier. Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="P:Walgelijk.TextComponent.LineHeightMultiplier">
            <summary>
            Distance between each line.  Changing this forces a vertex array update.
            </summary>
        </member>
        <member name="T:Walgelijk.TextMaterial">
            <summary>
            Utility struct that provides static text material creation functions
            </summary>
        </member>
        <member name="M:Walgelijk.TextMaterial.CreateFor(Walgelijk.Font)">
            <summary>
            Create a material for a given font
            </summary>
            <param name="font"></param>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.TextMaterial.CreateClipMaterial(Walgelijk.IReadableTexture[])">
            <summary>
            Create a material for a set of sharp textures
            </summary>
        </member>
        <member name="M:Walgelijk.TextMaterial.CreateSDFMaterial(Walgelijk.IReadableTexture[])">
            <summary>
            Create a material for a set of SDF textures
            </summary>
        </member>
        <member name="T:Walgelijk.TextMeshGenerator">
            <summary>
            Utility class that provides text mesh generation functions 
            </summary>
        </member>
        <member name="P:Walgelijk.TextMeshGenerator.Font">
            <summary>
            Font to render with
            </summary>
        </member>
        <member name="P:Walgelijk.TextMeshGenerator.Color">
            <summary>
            Color to set the vertices with
            </summary>
        </member>
        <member name="P:Walgelijk.TextMeshGenerator.TrackingMultiplier">
            <summary>
            Tracking multiplier
            </summary>
        </member>
        <member name="P:Walgelijk.TextMeshGenerator.KerningMultiplier">
            <summary>
            Kerning multiplier
            </summary>
        </member>
        <member name="P:Walgelijk.TextMeshGenerator.LineHeightMultiplier">
            <summary>
            Line height multiplier
            </summary>
        </member>
        <member name="M:Walgelijk.TextMeshGenerator.Generate(System.String,Walgelijk.Vertex[],System.UInt32[])">
            <summary>
            Generate 2D text mesh. Returns the local bounding box.
            </summary>
            <param name="displayString">Text to render</param>
            <param name="vertices">Vertex array that will be populated. This needs to be the length of displayString * 4</param>
            <param name="vertices">Index array that will be populated. This needs to be the length of displayString * 6</param>
        </member>
        <member name="F:Walgelijk.Utilities.RadToDeg">
            <summary>
            Radians to degrees constant ratio
            </summary>
        </member>
        <member name="F:Walgelijk.Utilities.DegToRad">
            <summary>
            Degrees to radians constant ratio
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Linearly interpolate between two floats
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
            <summary>
            Linearly interpolate between two colors or 4 dimensional vectors
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
            <summary>
            Linearly interpolate between two vectors
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
            <summary>
            Linearly interpolate between two vectors
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomFloat(System.Single,System.Single)">
            <summary>
            Returns a random float in a range
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomPointInCircle(System.Single,System.Single)">
            <summary>
            Returns a random point in a circle
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomInt(System.Int32,System.Int32)">
            <summary>
            Returns a random int in a range
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomByte">
            <summary>
            Returns a random byte
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.RandomColour(System.Single)">
            <summary>
            Returns a colour where the RGB components are random
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamp a value within a range
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Utilities.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamp a value within a range
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Utilities.Mod(System.Single,System.Single)">
            <summary>
            Modulus
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.DeltaAngle(System.Single,System.Single)">
            <summary>
            Smallest difference between two angles in degrees
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.PickRandom``1(System.Collections.Generic.IList{``0})">
            <summary>
            Return a random entry in a <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.AngleToVector(System.Single)">
            <summary>
            Returns a normalised <see cref="T:System.Numerics.Vector2"/> corresponding to the given angle in degrees. 
            0° gives (1, 0). 90° gives (0, 1)
            </summary>
        </member>
        <member name="M:Walgelijk.Utilities.MapRange(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Linearly map a value in a range onto another range
            </summary>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="b1"></param>
            <param name="b2"></param>
            <param name="s"></param>
            <returns>Remapped value <paramref name="s"/></returns>
        </member>
        <member name="M:Walgelijk.Utilities.ApplyAcceleration(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)">
            <summary>
            Apply a constant acceleration to the given 2D position and 2D velocity, considering a time step.
            </summary>
            <param name="acceleration">The acceleration</param>
            <param name="currentPos">The initial position</param>
            <param name="currentVelocity">The initial velocity</param>
            <param name="deltaTime">The time step</param>
            <param name="dampening">Optional dampening parameter (0 - 1)</param>
            <returns>A struct with the new position and new velocity</returns>
        </member>
        <member name="M:Walgelijk.Utilities.ApplyAcceleration(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Apply a constant acceleration to the given 1D position and 1D velocity, considering a time step.
            </summary>
            <param name="acceleration">The acceleration</param>
            <param name="currentPos">The initial position</param>
            <param name="currentVelocity">The initial velocity</param>
            <param name="deltaTime">The time step</param>
            <param name="dampening">Optional dampening parameter (0 - 1)</param>
            <returns>A struct with the new position and new velocity</returns>
        </member>
        <member name="T:Walgelijk.DrawBounds">
            <summary>
            Drawing bounds structure
            </summary>
        </member>
        <member name="F:Walgelijk.DrawBounds.Size">
            <summary>
            Size of the rectangle in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.DrawBounds.Position">
            <summary>
            Top left corner of the rectangle in pixels
            </summary>
        </member>
        <member name="F:Walgelijk.DrawBounds.Enabled">
            <summary>
            Activate / deactivate the drawing bounds
            </summary>
        </member>
        <member name="M:Walgelijk.DrawBounds.#ctor(System.Numerics.Vector2,System.Numerics.Vector2,System.Boolean)">
            <summary>
            Construct draw bounds settings
            </summary>
        </member>
        <member name="P:Walgelijk.DrawBounds.DisabledBounds">
            <summary>
            Returns an instance that disables the drawbounds
            </summary>
        </member>
        <member name="T:Walgelijk.InputState">
            <summary>
            Struct that simply holds input data
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.MouseButtonsDown">
            <summary>
            All mouse buttons that have been pressed last frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.MouseButtonsHeld">
            <summary>
            All mouse buttons that are currently held
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.MouseButtonsUp">
            <summary>
            All moues buttons that have been released last frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.KeysDown">
            <summary>
            All keys that have been pressed last frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.KeysHeld">
            <summary>
            All keys that are currently held
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.KeysUp">
            <summary>
            All keys that were released last frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.WindowMousePosition">
            <summary>
            Mouse position in window coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.WorldMousePosition">
            <summary>
            Mouse position in world coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.WindowMouseDelta">
            <summary>
            Mouse movement delta over 1 frame in window coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.WorldMouseDelta">
            <summary>
            Mouse movement delta over 1 frame in world coordinates
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.MouseScrollDelta">
            <summary>
            Mouse wheel delta over 1 frame
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.AnyKey">
            <summary>
            Returns if any key is down
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.AnyMouseButton">
            <summary>
            Returns if any mouse button is down
            </summary>
        </member>
        <member name="F:Walgelijk.InputState.TextEntered">
            <summary>
            The text entered last frame
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsKeyHeld(Walgelijk.Key)">
            <summary>
            Returns if the key is held
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsKeyPressed(Walgelijk.Key)">
            <summary>
            Retusn if the key was pressed
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsKeyReleased(Walgelijk.Key)">
            <summary>
            Returns if the key was released
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsButtonHeld(Walgelijk.Button)">
            <summary>
            Returns if the key is held
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsButtonPressed(Walgelijk.Button)">
            <summary>
            Retusn if the key was pressed
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.IsButtonReleased(Walgelijk.Button)">
            <summary>
            Returns if the key was released
            </summary>
        </member>
        <member name="M:Walgelijk.InputState.Reset(Walgelijk.InputState@)">
            <summary>
            Reset the given <see cref="T:Walgelijk.InputState"/>
            </summary>
        </member>
        <member name="T:Walgelijk.Window">
            <summary>
            A game window
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Title">
            <summary>
            Title of the window
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Position">
            <summary>
            Position of the window on the display in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Size">
            <summary>
            Size of the window in pixels
            </summary>
        </member>
        <member name="P:Walgelijk.Window.TargetFrameRate">
            <summary>
            Speed the game should render at
            </summary>
        </member>
        <member name="P:Walgelijk.Window.TargetUpdateRate">
            <summary>
            Speed the game should run updates at
            </summary>
        </member>
        <member name="P:Walgelijk.Window.VSync">
            <summary>
            Should vertical synchronisation be enabled
            </summary>
        </member>
        <member name="P:Walgelijk.Window.IsOpen">
            <summary>
            Is the window open?
            </summary>
        </member>
        <member name="P:Walgelijk.Window.HasFocus">
            <summary>
            Does the window have user focus?
            </summary>
        </member>
        <member name="P:Walgelijk.Window.IsVisible">
            <summary>
            Is the window visible?
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Resizable">
            <summary>
            Is the window resizable?
            </summary>
        </member>
        <member name="P:Walgelijk.Window.InputState">
            <summary>
            The current input state
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Graphics">
            <summary>
            Graphics functions
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Time">
            <summary>
            Time information
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Icon">
            <summary>
            The icon for the window
            </summary>
        </member>
        <member name="P:Walgelijk.Window.RenderQueue">
            <summary>
            The window render queue. It stores the render tasks and is emptied and executed every render frame.
            </summary>
        </member>
        <member name="P:Walgelijk.Window.Game">
            <summary>
            The <see cref="T:Walgelijk.Game"/> this window originates from
            </summary>
        </member>
        <member name="P:Walgelijk.Window.RenderTarget">
            <summary>
            The main rendertarget for this window
            </summary>
        </member>
        <member name="E:Walgelijk.Window.OnResize">
            <summary>
            Fires when the window is resized. Provides new size
            </summary>
        </member>
        <member name="E:Walgelijk.Window.OnMove">
            <summary>
            Fires when the window is moved. Provides new position
            </summary>
        </member>
        <member name="E:Walgelijk.Window.OnFileDrop">
            <summary>
            Fires when a file is dropped on the window, Provides file paths
            </summary>
        </member>
        <member name="E:Walgelijk.Window.OnClose">
            <summary>
            Fires when the window is going to close
            </summary>
        </member>
        <member name="M:Walgelijk.Window.StartLoop">
            <summary>
            Start the main game loop
            </summary>
        </member>
        <member name="M:Walgelijk.Window.Close">
            <summary>
            Close the window and stop the game loop
            </summary>
        </member>
        <member name="M:Walgelijk.Window.ScreenToWindowPoint(System.Numerics.Vector2)">
            <summary>
            Turn screen coordinates into window coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Window.WindowToScreenPoint(System.Numerics.Vector2)">
            <summary>
            Turn window coordinates into screen coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Window.WorldToWindowPoint(System.Numerics.Vector2)">
            <summary>
            Turn window coordinates into world coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Window.WindowToWorldPoint(System.Numerics.Vector2)">
            <summary>
            Turn world coordinates into window coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Walgelijk.Window.InvokeResizeEvent(System.Numerics.Vector2)">
            <summary>
            Invoke the resize event
            </summary>
            <param name="newSize"></param>
        </member>
        <member name="M:Walgelijk.Window.InvokeMoveEvent(System.Numerics.Vector2)">
            <summary>
            Invoke the move event
            </summary>
            <param name="newPosition"></param>
        </member>
        <member name="M:Walgelijk.Window.InvokeFileDropEvent(System.String[])">
            <summary>
            Invoke the file drop event
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Walgelijk.Window.InvokeCloseEvent">
            <summary>
            Invoke the close event
            </summary>
        </member>
        <member name="M:Walgelijk.Window.ResetInputState">
            <summary>
            Manually reset the input state
            </summary>
        </member>
    </members>
</doc>
